{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to OpenGrid, an open source interactive map that allows users to explore city data in an easy to use interface. OpenGrid offers real-time or historical insights of event-based data based on time and location; whether its 311 calls, crimes, tweets, or other data sources.\n\n\n\n\n\n\n\nReal-time and Historical Spatial Analysis\n\uf0c1\n\n\nOpenGrid can be used for real-time data analysis, refreshing frequently to provide the most up-to-date information. It also allows users to reach back into time to look at past events.\n\n\nTechnical Architecture\n\uf0c1\n\n\nOpenGrid is designed to be flexible with different types of data sources. Whether it's MongoDB, a RESTful API, or other data sources, programmers can use \nOpenGrid's API\n and \nService Layer\n to program it to work with other data sources.\n\n\nOpen Source\n\uf0c1\n\n\nOpen source gives \"OpenGrid\" its name. Feel free to use it, contribute to it, or change it. Just please take a look at the project's \nlicense\n.",
            "title": "Home"
        },
        {
            "location": "/#real-time-and-historical-spatial-analysis",
            "text": "OpenGrid can be used for real-time data analysis, refreshing frequently to provide the most up-to-date information. It also allows users to reach back into time to look at past events.",
            "title": "Real-time and Historical Spatial Analysis"
        },
        {
            "location": "/#technical-architecture",
            "text": "OpenGrid is designed to be flexible with different types of data sources. Whether it's MongoDB, a RESTful API, or other data sources, programmers can use  OpenGrid's API  and  Service Layer  to program it to work with other data sources.",
            "title": "Technical Architecture"
        },
        {
            "location": "/#open-source",
            "text": "Open source gives \"OpenGrid\" its name. Feel free to use it, contribute to it, or change it. Just please take a look at the project's  license .",
            "title": "Open Source"
        },
        {
            "location": "/layout/launch-screen/",
            "text": "Map Grid\n\uf0c1\n\n\nThe grid is interactive, a user can navigate the map using a mouse,\nkeyboard and for mobile devices by swiping using index finger or pin. \nThe map displays the maximum of 1000 points. \n\n\nAll data appears on the grid as points and/or markers. \u00a0 Place/Address search plots\nas markers and Datasets plots as points on the grid. \u00a0 A retractable information box \nappears to the bottom right of the grid when a search is executed, displaying the no. of \nrecords found or an error message pertaining to a search, if any occurs.\n\n\nThe grid has an automatic refresh mechanism for replotting and repositioning data points\non the grid; when the grid is being moved or manipulated.\n\n\n\n\n\nThe Launch Screen\n\uf0c1\n\n\n\n\n\n    \n\n        \n Element No.\n\n        \nElement Name/Description\n\n    \n\n        \n\n        \n\n            1.\n        \n\n        \n\n            Quick Search box is used to perform basic searches on datasets. The question mark icon within the Quick Search              box displays a cheat sheet for quick search syntax.\n        \n\n    \n\n    \n\n        \n\n            2.\n        \n\n        \n\n            \n\n                \nFind Data Button displays the advanced search panel utilize to create more defined searches.\n\n                \nClear Data Button, resets the map.\n\n            \n\n        \n\n    \n\n    \n\n        \n\n            3.\n        \n\n        \n\n            User Manual Link \n                \n\n                    \nLink to accessing the OpenGrid user manual.\n\n            \n\n        \n\n    \n\n    \n\n        \n\n            4.\n        \n\n        \n\n            Zoom In and Zoom Out Icon \n\n        \n\n        \n\n        \n\n            \n\n                    5.\n            \n\n            \n\n                    Reset Map View and Area Zoom Icon \n\n            \n\n      \n\n    \n\n            \n\n                    6.\n            \n   \n            \n\n                    Zoom Specification Icon \n\n        \n \n\n                    Full-Screen Icon \n \n        \n \n\n                Geo-Location Icon \n\n            \n\n    \n\n     \n\n            \n\n                 7.\n            \n\n            \n\n            Measurement Tool \n\n        \n\n       \n    \n    \n\n        \n\n            8.\n        \n\n            \n\n                    Layers Icon \n \n        \n \n            Consist of list of grid views and weather layers.\n        \n\n            \nBase Layers Views:\n\n                    \n \n \n\n                            \nStreet View (Default)\n\n                            \nAerial View\n\n                            \nBlack and White View\n\n                    \n\n            \nOpen Weather Layers:\n\n                    \n \n \n\n                            \nCloud Cover\n\n                            \nQuantity of Precipitation\n\n                            \nSea Level Pressure\n\n                            \nTemperature\n\n                    \n\n            \n\n        \n\n      \n\n        \n\n            9.\n        \n\n        \n\n            Expandable Table View Panel\n        \n\n    \n\n    \n\n        \n\n            10.\n        \n\n        \n\n            Map attribution; display's a link for any copyright information, terms of usage, etc.\n        \n\n    \n\n    \n\n        \n\n            11.\n        \n\n        \n\n            Main Map Display\n        \n\n    \n\n\n\n\n\n\n\nMap/Base Layers\n\uf0c1\n\n\nThe layers\u2019 icon displays multiple basemap views and \nopen weather layers\n. The list is built dynamically based on what's available through the map service provider. In the lower right hand corner on the grid, there is information and active links provided about the map services. The initial launch page displays the default basemap, street view \n(see login launch screen image above)\n and all other basemaps see images below.\n\n\n\n\nAerial View\n\n\n\n\nGrayscale View\n\n\nMap Key/Legend\n\uf0c1\n\n\nMap key provides essential information of understanding a map. OpenGrid uses colors to signify what type of search has been executed; the key explains what the color represents. The legend is located at the bottom right of the map. If, multiple parameter types with same dataset is being displayed for a search; it will display the two datatypes based off color representation from the setup on the grid.\n\n\n\n\nMap Grid and Key/Legend\n\n\nMap Navigation\n\uf0c1\n\n\nNavigation tools are used to aid users in finding their way around a\nmap. Using navigational controls, the user will be able to:\n\n\n\n\n\n\nzoom in/out\n\n\n\n\n\n\nreset the map\n\n\n\n\n\n\npan to any direction\n\n\n\n\n\n\nswitch to full screen mode\n\n\n\n\n\n\nactivate geo-location\n\n\n\n\n\n\napply layers\n\n\n\n\n\n\napply measurements\n\n\n\n\n\n\nselect hyperlinks",
            "title": "Launch Screen"
        },
        {
            "location": "/layout/launch-screen/#map-grid",
            "text": "The grid is interactive, a user can navigate the map using a mouse,\nkeyboard and for mobile devices by swiping using index finger or pin. \nThe map displays the maximum of 1000 points.   All data appears on the grid as points and/or markers. \u00a0 Place/Address search plots\nas markers and Datasets plots as points on the grid. \u00a0 A retractable information box \nappears to the bottom right of the grid when a search is executed, displaying the no. of \nrecords found or an error message pertaining to a search, if any occurs.  The grid has an automatic refresh mechanism for replotting and repositioning data points\non the grid; when the grid is being moved or manipulated.",
            "title": "Map Grid"
        },
        {
            "location": "/layout/launch-screen/#the-launch-screen",
            "text": "Element No. \n         Element Name/Description \n     \n         \n         \n            1.\n         \n         \n            Quick Search box is used to perform basic searches on datasets. The question mark icon within the Quick Search              box displays a cheat sheet for quick search syntax.\n         \n     \n     \n         \n            2.\n         \n         \n             \n                 Find Data Button displays the advanced search panel utilize to create more defined searches. \n                 Clear Data Button, resets the map. \n             \n         \n     \n     \n         \n            3.\n         \n         \n            User Manual Link \n                 \n                     Link to accessing the OpenGrid user manual. \n             \n         \n     \n     \n         \n            4.\n         \n         \n            Zoom In and Zoom Out Icon  \n         \n         \n         \n             \n                    5.\n             \n             \n                    Reset Map View and Area Zoom Icon  \n             \n       \n     \n             \n                    6.\n                \n             \n                    Zoom Specification Icon  \n           \n                    Full-Screen Icon   \n           \n                Geo-Location Icon  \n             \n     \n      \n             \n                 7.\n             \n             \n            Measurement Tool  \n         \n            \n     \n         \n            8.\n         \n             \n                    Layers Icon   \n          \n            Consist of list of grid views and weather layers.\n         \n             Base Layers Views: \n                         \n                             Street View (Default) \n                             Aerial View \n                             Black and White View \n                     \n             Open Weather Layers: \n                         \n                             Cloud Cover \n                             Quantity of Precipitation \n                             Sea Level Pressure \n                             Temperature \n                     \n             \n         \n       \n         \n            9.\n         \n         \n            Expandable Table View Panel\n         \n     \n     \n         \n            10.\n         \n         \n            Map attribution; display's a link for any copyright information, terms of usage, etc.\n         \n     \n     \n         \n            11.\n         \n         \n            Main Map Display",
            "title": "The Launch Screen"
        },
        {
            "location": "/layout/launch-screen/#mapbase-layers",
            "text": "The layers\u2019 icon displays multiple basemap views and  open weather layers . The list is built dynamically based on what's available through the map service provider. In the lower right hand corner on the grid, there is information and active links provided about the map services. The initial launch page displays the default basemap, street view  (see login launch screen image above)  and all other basemaps see images below.   Aerial View   Grayscale View",
            "title": "Map/Base Layers"
        },
        {
            "location": "/layout/launch-screen/#map-keylegend",
            "text": "Map key provides essential information of understanding a map. OpenGrid uses colors to signify what type of search has been executed; the key explains what the color represents. The legend is located at the bottom right of the map. If, multiple parameter types with same dataset is being displayed for a search; it will display the two datatypes based off color representation from the setup on the grid.   Map Grid and Key/Legend",
            "title": "Map Key/Legend"
        },
        {
            "location": "/layout/launch-screen/#map-navigation",
            "text": "Navigation tools are used to aid users in finding their way around a\nmap. Using navigational controls, the user will be able to:    zoom in/out    reset the map    pan to any direction    switch to full screen mode    activate geo-location    apply layers    apply measurements    select hyperlinks",
            "title": "Map Navigation"
        },
        {
            "location": "/layout/table-grid/",
            "text": "Table Grid\n\uf0c1\n\n\nThe table grid is located at the bottom of the map. The table becomes active when a search has been performed and returns a set of results on the map. To access the table, click on the black bar at the bottom of the map, there is a white carat displayed in the middle of bar below as an indicator that the bar is collapsible. After clicking on the bar, the table will expand upward exposing the table and its components.\n\n\n\n\nTable Grid\n\n\nComponents of a Table Grid\n\uf0c1\n\n\nInformation Tab\n\uf0c1\n\n\nSearch Type (i.e. Place/Address, Business License).\n\n\nSearch Textbox\n\uf0c1\n\n\nUsed to filter by data components within the table.\n\n\nColumns Icon\n\uf0c1\n\n\nProvides a drop list of available columns pertaining to the data within the datasets. The columns are interchangeable; user can enable and disable certain columns from the table by selecting or deselecting each column name from the column list.\n\n\nExport Icon\n\uf0c1\n\n\nProvides a drop-list of available exportation options used to send\nor transfer data from the table into the following formats:\n\n\nCSV - Comma Separated Values\n\n\nPDF - Portable Document Format\n\n\nMS Excel - Microsoft Excel\n\n\nHeat Map\n\uf0c1\n\n\nData that\u2019s contained in a matrix within a representation of colors to use for analysis, comparison or trending purposes. For full description see \nHeat Maps\n.\n\n\n\n\nTile Map\n\uf0c1\n\n\nSmall images, usually rectangular or isometric layers that acts as puzzle pieces to cover an intended area. For full description see \nTile Maps\n.\n\n\n\n\nRows Droplist\n\uf0c1\n\n\nProvides a drop list of total number of rows that can be displayed per page.\n\n\nPage Numbers\n\uf0c1\n\n\nInteractive number links for maneuvering through pages.",
            "title": "Table Grid"
        },
        {
            "location": "/layout/table-grid/#table-grid",
            "text": "The table grid is located at the bottom of the map. The table becomes active when a search has been performed and returns a set of results on the map. To access the table, click on the black bar at the bottom of the map, there is a white carat displayed in the middle of bar below as an indicator that the bar is collapsible. After clicking on the bar, the table will expand upward exposing the table and its components.   Table Grid",
            "title": "Table Grid"
        },
        {
            "location": "/layout/table-grid/#components-of-a-table-grid",
            "text": "",
            "title": "Components of a Table Grid"
        },
        {
            "location": "/layout/table-grid/#information-tab",
            "text": "Search Type (i.e. Place/Address, Business License).",
            "title": "Information Tab"
        },
        {
            "location": "/layout/table-grid/#search-textbox",
            "text": "Used to filter by data components within the table.",
            "title": "Search Textbox"
        },
        {
            "location": "/layout/table-grid/#columns-icon",
            "text": "Provides a drop list of available columns pertaining to the data within the datasets. The columns are interchangeable; user can enable and disable certain columns from the table by selecting or deselecting each column name from the column list.",
            "title": "Columns Icon"
        },
        {
            "location": "/layout/table-grid/#export-icon",
            "text": "Provides a drop-list of available exportation options used to send\nor transfer data from the table into the following formats:  CSV - Comma Separated Values  PDF - Portable Document Format  MS Excel - Microsoft Excel",
            "title": "Export Icon"
        },
        {
            "location": "/layout/table-grid/#heat-map",
            "text": "Data that\u2019s contained in a matrix within a representation of colors to use for analysis, comparison or trending purposes. For full description see  Heat Maps .",
            "title": "Heat Map"
        },
        {
            "location": "/layout/table-grid/#tile-map",
            "text": "Small images, usually rectangular or isometric layers that acts as puzzle pieces to cover an intended area. For full description see  Tile Maps .",
            "title": "Tile Map"
        },
        {
            "location": "/layout/table-grid/#rows-droplist",
            "text": "Provides a drop list of total number of rows that can be displayed per page.",
            "title": "Rows Droplist"
        },
        {
            "location": "/layout/table-grid/#page-numbers",
            "text": "Interactive number links for maneuvering through pages.",
            "title": "Page Numbers"
        },
        {
            "location": "/finding-data/getting-started/",
            "text": "Getting Started\n\uf0c1\n\n\n\n\n\n\nIn Select Data \u2013 Select the Add Dataset Link.\n\n\n\n\n\n\nA drop list of available datasets appears, select the appropriate Dataset.\n\n\n\n\n\n\nParameter box appears with and/or operator as connectors.\n\n\n\n\n\n\nIdentify the parameters from the drop list.\n\n\n\n\n\n\nAdd location boundary (see \"\nSelect Location\n\" section), if needed.\n\n\n\n\n\n\nExecute the search, select \"Get Data\".\n\n\n\n\n\n\nSearch Examples\n\uf0c1\n\n\nSingle Search With No Specification\n\uf0c1\n\n\nSearch that displays a single data-set with no parameters returns all information pertaining to that data-set. Maximum results displayed on the page is 1000.\n\n\n\n\nNo Filter Search\n\n\nSingle Search by Address\n\uf0c1\n\n\nSearch that is based off Address Only. Return all data pertaining to that address.\n\n\n\n\nAddress Search\n\n\nSingle Search With Multiple Parameters\n\uf0c1\n\n\nSearch that returns multiple criteria from a dataset. An example would be searching for multiple Business Licenses criteria for comparison purposes. Using food establishments as an example, search for restaurants and food trucks in the Chicagoland area. Both search criteria are listed under a single dataset, called Business Licenses. Each dataset point has a designated color; for Business Licenses the default color is Indian red.\n\n\nWhat should a user do about querying multiple parameters for a single dataset?\n\n\nHow will a user distinguished between the data when the points plotted on the grid will be the same color?\n\n\nAdd Business Licenses dataset twice, set one with a parameter of license_description = \u201cRetail Food Establishment\u201d and the other with license_description = \u201cMobile Food License\u201d.  \n\n\nDatasets are assigned a specific color point that plots on the map to represent each dataset, since we are applying the same dataset twice with separate parameters the points on the grid will be the same color in which would make it hard for a user to differentiate between the data.\n\n\nWhen setting up the search for each parameter; define each datapoint with a different color by selecting from the color palette located in the \n\"Color Options\"\n link below the setup panel. \n\n\nThe image below displays how the search setup and each data type is represented on the grid...Retail Food Establishments data displays as Blue and Mobile Food Licenses displays as Red on the grid.\n\n\n\n\nSingle Search With Multiple Parameters\n\n\nMultiple Search With Single Parameter\n\uf0c1\n\n\nMultiple data searches can be queried simultaneously returning multiple results on the grid. Repeat twice, select Add dataset link, apply single parameter and execute the search.\n\n\n\n\nMultiple Search With Single Parameters\n\n\nFind Data Panel\n\uf0c1\n\n\n\n\n\n    \n\n        \n\n            \nPanel No.\n\n        \n\n        \n\n            \nPanel Description\n\n        \n\n    \n\n    \n\n        \n\n            1.\n        \n\n        \n\n             Search Link, displays the search panel.\n        \n\n    \n\n        \n\n        \n\n            2.\n        \n\n        \n\n             Existing Queries is a collapsible link that displays \"Commonly Used Queries\".\n        \n\n    \n\n    \n\n        \n\n            3.\n        \n\n        \n\n            Commonly Used Queries are predefined searches that end users utilize to search around the chicagoland area.\n        \n\n    \n\n    \n\n        \n\n            4.\n        \n \n        \n\n\n Select Data, is a collapsible link that is used to run advanced searches within the find data panel.\n\n\n It has an \n\"Add Dataset\"\n link; that is used to start the process of creating a search, when selected it displays a              droplist of available city datasets. \n\n\n When a dataset is selected an additional textbox appears with AND/OR operands with an additional droplist that displays the           dataset searchable datatypes. \n \n\n There is also a color option link underneath the datatype selector search box, that provides the user with the option to change       the data point color, size and transparency. \n\n        \n\n    \n\n    \n\n        \n\n             5.\n        \n\n        \n\n\n Select Location, is a collapsible link that interacts with the Search Data section of the Find Data Panel; providing geo-spatial filtering against the dataset. There are two filter parameters within the Selection Location section called \n\"WITHIN\"\n and \n\"NEAR\"\n. \n\n\nWithin has a droplist of available geo spatial filterings that are used to search within a specific filter type. \n\n\n Near activates the geo locator \n(ME)\n or marker feature \n(MARKER)\n. For more details see \"WITHIN\" and \"NEAR\" section later in the document. \n\n        \n\n    \n\n    \n\n        \n\n             6.\n        \n     \n        \n     \n             Auto Refresh is activated when the checkbox is selected; the default timimg is 30 seconds.\n        \n\n    \n\n    \n\n        \n\n             7.\n        \n\n        \n\n            Get Data Button, executes the advanced search.\n        \n\n    \n\n    \n\n        \n\n            8.\n        \n    \n        \n    \n            Clear Search Button, resets the find data panel section.",
            "title": "Getting Started"
        },
        {
            "location": "/finding-data/getting-started/#getting-started",
            "text": "In Select Data \u2013 Select the Add Dataset Link.    A drop list of available datasets appears, select the appropriate Dataset.    Parameter box appears with and/or operator as connectors.    Identify the parameters from the drop list.    Add location boundary (see \" Select Location \" section), if needed.    Execute the search, select \"Get Data\".",
            "title": "Getting Started"
        },
        {
            "location": "/finding-data/getting-started/#search-examples",
            "text": "",
            "title": "Search Examples"
        },
        {
            "location": "/finding-data/getting-started/#single-search-with-no-specification",
            "text": "Search that displays a single data-set with no parameters returns all information pertaining to that data-set. Maximum results displayed on the page is 1000.   No Filter Search",
            "title": "Single Search With No Specification"
        },
        {
            "location": "/finding-data/getting-started/#single-search-by-address",
            "text": "Search that is based off Address Only. Return all data pertaining to that address.   Address Search",
            "title": "Single Search by Address"
        },
        {
            "location": "/finding-data/getting-started/#single-search-with-multiple-parameters",
            "text": "Search that returns multiple criteria from a dataset. An example would be searching for multiple Business Licenses criteria for comparison purposes. Using food establishments as an example, search for restaurants and food trucks in the Chicagoland area. Both search criteria are listed under a single dataset, called Business Licenses. Each dataset point has a designated color; for Business Licenses the default color is Indian red.  What should a user do about querying multiple parameters for a single dataset?  How will a user distinguished between the data when the points plotted on the grid will be the same color?  Add Business Licenses dataset twice, set one with a parameter of license_description = \u201cRetail Food Establishment\u201d and the other with license_description = \u201cMobile Food License\u201d.    Datasets are assigned a specific color point that plots on the map to represent each dataset, since we are applying the same dataset twice with separate parameters the points on the grid will be the same color in which would make it hard for a user to differentiate between the data.  When setting up the search for each parameter; define each datapoint with a different color by selecting from the color palette located in the  \"Color Options\"  link below the setup panel.   The image below displays how the search setup and each data type is represented on the grid...Retail Food Establishments data displays as Blue and Mobile Food Licenses displays as Red on the grid.   Single Search With Multiple Parameters",
            "title": "Single Search With Multiple Parameters"
        },
        {
            "location": "/finding-data/getting-started/#multiple-search-with-single-parameter",
            "text": "Multiple data searches can be queried simultaneously returning multiple results on the grid. Repeat twice, select Add dataset link, apply single parameter and execute the search.   Multiple Search With Single Parameters",
            "title": "Multiple Search With Single Parameter"
        },
        {
            "location": "/finding-data/getting-started/#find-data-panel",
            "text": "Panel No. \n         \n         \n             Panel Description \n         \n     \n     \n         \n            1.\n         \n         \n             Search Link, displays the search panel.\n         \n     \n         \n         \n            2.\n         \n         \n             Existing Queries is a collapsible link that displays \"Commonly Used Queries\".\n         \n     \n     \n         \n            3.\n         \n         \n            Commonly Used Queries are predefined searches that end users utilize to search around the chicagoland area.\n         \n     \n     \n         \n            4.\n          \n           Select Data, is a collapsible link that is used to run advanced searches within the find data panel.   It has an  \"Add Dataset\"  link; that is used to start the process of creating a search, when selected it displays a              droplist of available city datasets.    When a dataset is selected an additional textbox appears with AND/OR operands with an additional droplist that displays the           dataset searchable datatypes.     There is also a color option link underneath the datatype selector search box, that provides the user with the option to change       the data point color, size and transparency.  \n         \n     \n     \n         \n             5.\n         \n           Select Location, is a collapsible link that interacts with the Search Data section of the Find Data Panel; providing geo-spatial filtering against the dataset. There are two filter parameters within the Selection Location section called  \"WITHIN\"  and  \"NEAR\" .   Within has a droplist of available geo spatial filterings that are used to search within a specific filter type.    Near activates the geo locator  (ME)  or marker feature  (MARKER) . For more details see \"WITHIN\" and \"NEAR\" section later in the document.  \n         \n     \n     \n         \n             6.\n              \n              \n             Auto Refresh is activated when the checkbox is selected; the default timimg is 30 seconds.\n         \n     \n     \n         \n             7.\n         \n         \n            Get Data Button, executes the advanced search.\n         \n     \n     \n         \n            8.\n             \n             \n            Clear Search Button, resets the find data panel section.",
            "title": "Find Data Panel"
        },
        {
            "location": "/finding-data/advanced-filtering/",
            "text": "Advanced Filtering\n\uf0c1\n\n\nFiltering is a useful way to view data you want displayed. There are mulitple ways to filter data. A user can query on mulitple conditions using AND/OR operator. The AND operand, returns values when all conditions are true. The OR operand, returns values when one or more conditions are true.\n\n\n\n\nOperator Connector\n\n\nMatch all conditions\n\uf0c1\n\n\n\n\n\"AND\" Operand\n\n\nMatch any condition\n\uf0c1\n\n\n\n\n\"OR\" Operand\n\n\nGrouping Filters\n\uf0c1\n\n\n\n\nAdd Group",
            "title": "Advanced Filtering"
        },
        {
            "location": "/finding-data/advanced-filtering/#advanced-filtering",
            "text": "Filtering is a useful way to view data you want displayed. There are mulitple ways to filter data. A user can query on mulitple conditions using AND/OR operator. The AND operand, returns values when all conditions are true. The OR operand, returns values when one or more conditions are true.   Operator Connector",
            "title": "Advanced Filtering"
        },
        {
            "location": "/finding-data/advanced-filtering/#match-all-conditions",
            "text": "\"AND\" Operand",
            "title": "Match all conditions"
        },
        {
            "location": "/finding-data/advanced-filtering/#match-any-condition",
            "text": "\"OR\" Operand",
            "title": "Match any condition"
        },
        {
            "location": "/finding-data/advanced-filtering/#grouping-filters",
            "text": "Add Group",
            "title": "Grouping Filters"
        },
        {
            "location": "/finding-data/auto-refresh-search/",
            "text": "Auto refresh is an optional feature within the application that can be applied to a search. \nThe refresh component is used for monitoring, performance, or updates related to data. \u00a0 Auto-refresh keeps the map in sync with tha latest data while the map is open.\n\n\nWhen active, it refreshes in intervals of seconds (default is 30 seconds and maximum of 3600 seconds (60 minutes)); it refreshes and replots the latest data on the map whether its using the application on a desktop or mobile device.\n\n\n\n\nAuto-refresh example using markers on a map.\n\n\nAs the map continues to refresh, three things can occur since the initial load:\n\n\n\n\nA message appears if the search times out.\n\n\nA message appears if new data is available displaying the new count.\n\n\nThe screen remains static if no new content has been made available.\n\n\n\n\nSteps to auto refresh\n\uf0c1\n\n\nTo enable auto-refresh of your data and base map, in\nthe Find Data panel -> go the auto refresh section.\nCheck the box \n\u201cAuto-Refresh Every (SECONDS)\u201d\n. \u00a0\nSelect the number of seconds required for desired auto-refresh\nby using the increment/decrement counter or enter the number\nof seconds in the auto-refresh textbox. \u00a0 Select \"Get Data\".",
            "title": "Automatically Refresh Searches"
        },
        {
            "location": "/finding-data/auto-refresh-search/#steps-to-auto-refresh",
            "text": "To enable auto-refresh of your data and base map, in\nthe Find Data panel -> go the auto refresh section.\nCheck the box  \u201cAuto-Refresh Every (SECONDS)\u201d . \u00a0\nSelect the number of seconds required for desired auto-refresh\nby using the increment/decrement counter or enter the number\nof seconds in the auto-refresh textbox. \u00a0 Select \"Get Data\".",
            "title": "Steps to auto refresh"
        },
        {
            "location": "/finding-data/commonly-used-queries/",
            "text": "Commonly Used Queries are predefined executeable searches. Each search has preselected parameters that has been defined. Users can view the\npredefined parameters within the Select Data and/or Select Location section of the find data panel. Users can also build upon a predefined\nquery and personalize it to their preference. \n\n\nTo execute a Commonly Used Queries, in the find data panel under Existing Queries-> select \n\n\"COMMONLY USED QUERIES\"\n droplist and select a predefined query. Click Get Data. The example below\ndisplays the query \n\"What's happening near me?\"\n from the list.\n\n\n\n\nCommonly Used Queries",
            "title": "Commonly Used Queries"
        },
        {
            "location": "/finding-data/relative-time-searches/",
            "text": "There are operators used in conjunction with dates and time being applied to a search.\n\n\n\n\n\n\nbetween\n - presents two value filter fields and returns data that\u2019s between the two filter values specified.\n\n\n\n\n\n\ngreater\n - returns all data that\u2019s after than the date/time specified.\n\n\n\n\n\n\nless\n - returns all data that\u2019s before than the date/time specified.\n\n\n\n\n\n\nTo add a date to a query, enter specific search parameters in Add data-set section in the find data panel. In the parameter drop-list select a date parameter from the drop-list of the specified data-set.\n\n\nWhen the date parameter is applied, the operand \u201cbetween\u201d and two search fields will appear called \n\u201cENTER FILTER VALUE\u201d\n as the default. Place the mouse into \n \u201cENTER FILTER VALUE\u201d\n field, to add time and date, the calendar appears with current date as the default. The calendar has optional ways on how a user can enter and display date into the application when setting up a search. \n\n\n\n\n\n        \n\n            \n\n                \nElement No.\n\n            \n\n            \n\n                \nElement Description\n\n            \n\n        \n\n        \n\n            \n\n                1.\n            \n\n             \n  \n                Operators - determines how dates are entered.\n            \n\n        \n\n        \n\n            \n\n                2.\n            \n\n            \n\n                ENTER FILTER VALUE - where time is entered.\n            \n\n        \n\n        \n\n            \n\n                3.\n            \n\n            \n\n                Month/Year Identifier - Displays the Month/Year being presented for a search. When calendar is displayed, current month/year appear as default.\n            \n\n        \n\n        \n\n            \n\n                4.\n            \n\n            \n\n                less than carat - allows user to enter past dates. \n            \n\n        \n\n        \n\n            \n\n                5.\n            \n\n            \n\n                Greater than carat - allows users to enter current or future dates.\n            \n\n        \n\n        \n\n            \n\n                6.\n            \n\n            \n\n                weekday - day of the week\n            \n\n        \n\n        \n\n            \n\n                7.\n            \n\n            \n\n                date of the month - specified day of the month\n            \n\n        \n\n        \n\n            \n\n                8.\n            \n\n            \n\n                Select Time - switches between the calendar and time panel allowing the user to enter time. Time is displayed as 12 hour.\n           \n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n            \n\n                \nSelect Time Description\n\n            \n\n        \n\n        \n\n            \n\n                 Select Time: Switches back to the calendar panel\n            \n\n        \n\n        \n\n            \n\n                 Increment Hour: Increases hour in time\n            \n\n        \n\n        \n\n            \n\n                 Increment Minute: Increase minutes in time\n            \n\n        \n\n        \n\n            \n\n                 Pick Hour: Active link it switches to the hour panel where an hour can be choose from numerically (0-12) \n            \n\n        \n\n        \n\n            \n\n                 Pick Minute: Active link it switches to the minute panel where minutes chosen in increments of 5s (00 thru 55)\n            \n\n        \n\n        \n\n            \n\n                 Toggle Period: Meridiem Selector\n            \n\n        \n\n        \n\n            \n\n                 Decrement Hour: Decrease hour in time\n            \n\n        \n\n        \n\n            \n\n                 Decrement Minute: Decrease minutes in time\n            \n\n        \n\n\n\n\n\n\nUsing Relative Time in a Search\n\uf0c1\n\n\nHere are some examples in using dates and times in combination of a search.\nSome searches that occur displays results from current date/time if not specified.\nAlways default to current date/time when placing cursor in the value filter.\n\n\n\n\nyesterday\n\n\ntomorrow\n\n\ntoday\n\n\nday (i.e. a day ago, 2 days ago, etc.)\n\n\nweek (i.e. a week ago, 2 weeks ago, etc.)\n\n\nmonth (i.e. a month ago, 2 months ago, etc.)\n\n\nyear (i.e. a year ago, 2 years ago, etc.)\n\n\nseconds (i.e. 15 seconds ago, 30 seconds ago, etc.)\n\n\nminutes (i.e. 15 minutes ago, 30 minutes ago, etc.)\n\n\nhours (i.e. 1 hour ago, 2 hours ago, etc.)\n\n\n\n\nRelative Time\n\uf0c1\n\n\nUsing days\n \n\n\n\n\n\n\nCrimes\n  \n\n\n\n\nIncident Date \nbetween\n 9 days ago\n and \n7 days ago\n (from the current date/time)\n\n\n\n\n\n\n\n\nCrimes\n\n\n\n\nIncident Date \nbetween\n 7/22/2016 9:30:00 AM\n and \na week ago\n\n\n\n\n\n\n\n\nCrimes\n\n\n\n\nIncident Date \nbetween\n a week ago\n and \ntoday\n\n\n\n\n\n\n\n\nUsing hours\n\n\n\n\n\nCrimes\n\n\nIncident Date \nbetween\n 3 hours ago\n and \n2 hours ago\n (from the current date/time)\n\n\n\n\n\n\n\n\nUsing greater and less than in relative time\n\n\n\n\n\n\n\nCrimes\n\n\n\n\nIncident Date \ngreater than\n 4 days ago\n\n\n\n\n\n\n\n\nCrimes\n\n\n\n\nIncident Date \ngreater than\n a week ago\n\n\n\n\n\n\n\n\nCrimes\n\n\n\n\nIncident Date \nless than\n 10 hours ago\n\n\n\n\n\n\n\n\nCrimes\n\n\n\n\nIncident Date \nless than\n 30 minutes ago\n\n\n\n\n\n\n\n\nCrimes\n\n\n\n\nIncident Date \nless than\n today\n\n\n\n\n\n\n\n\nAbsolute Time\n\uf0c1\n\n\n\n\nCrimes\n\n\nIncident Date \nbetween\n 8/31/2016 9:30:00 AM\n and \n8/31/2016 10:30:00 AM\n\n\n\n\n\n\n\n\nUsing Seconds\n\n\n\n\n\nCrimes\n\n\nIncident Date \nbetween\n 8/31/2016 10:30:00 AM\n and \n8/31/2016 10:30:58 AM\n\n\n\n\n\n\n\n\nUsing greater and less than in absolute time\n\n\n\n\n\n\n\nCrimes\n\n\n\n\nIncident Date \ngreater than\n 7/22/2017 11:30:00 PM\n\n\n\n\n\n\n\n\nCrimes\n\n\n\n\nIncident Date \nless than\n 7/22/2017 11:30:00 PM\n\n\n\n\n\n\n\n\nUsers can apply time series to a search. The search will return all plotted data from the time series specified within the defined search.\n\n\n\n\nRelative Time Search",
            "title": "Searching With Relative Time"
        },
        {
            "location": "/finding-data/relative-time-searches/#using-relative-time-in-a-search",
            "text": "Here are some examples in using dates and times in combination of a search.\nSome searches that occur displays results from current date/time if not specified.\nAlways default to current date/time when placing cursor in the value filter.   yesterday  tomorrow  today  day (i.e. a day ago, 2 days ago, etc.)  week (i.e. a week ago, 2 weeks ago, etc.)  month (i.e. a month ago, 2 months ago, etc.)  year (i.e. a year ago, 2 years ago, etc.)  seconds (i.e. 15 seconds ago, 30 seconds ago, etc.)  minutes (i.e. 15 minutes ago, 30 minutes ago, etc.)  hours (i.e. 1 hour ago, 2 hours ago, etc.)",
            "title": "Using Relative Time in a Search"
        },
        {
            "location": "/finding-data/relative-time-searches/#relative-time",
            "text": "",
            "title": "Relative Time"
        },
        {
            "location": "/finding-data/relative-time-searches/#absolute-time",
            "text": "Crimes  Incident Date  between  8/31/2016 9:30:00 AM  and  8/31/2016 10:30:00 AM",
            "title": "Absolute Time"
        },
        {
            "location": "/search-location/within-geospatial-filter/",
            "text": "Searching Within an Area\n\uf0c1\n\n\nYou can search within a pre-defined area on the map, including an feature to let you draw on the map to find the data you need.\n\n\nMap Extent\n\uf0c1\n\n\nA map extent is the portion of area shown in a map. Map extents usually have a rectangular shape. Map extent can be changed by zooming and panning.\n\n\nCitywide\n\uf0c1\n\n\nSearches boundaries within the City of Chicago.\n\n\nWard\n\uf0c1\n\n\nSearches within a city ward.\n\n\nZip Code\n\uf0c1\n\n\nSearches within a city zip code.\n\n\nDrawn Extent\n\uf0c1\n\n\nDrawn Extent is located in the Find Data panel under Select Location; it is used to create polygon and/or rectangle shapes to run results from a specific location on a map. When the Drawn Extent feature is activated the shape, edit, and delete buttons appears on the grid.\n\n\nHow to use drawn extent:\n\uf0c1\n\n\n\n\n In the find data panel, setup a search and activate drawn extent in the select location section.\n\n\n Select a shape image on the grid, when hovering on a button, it provides information about the button.\n\n\n\n To draw polygon shape, select the polygon image on the map, the image will activate, a cursor will appear with text \"Click to start drawing a shape\".\n\n\n\n Begin adding points on the map in the area desired after last point is complete, text will appear \"Click first point to close this shape\". To complete the shape, click finish on the polygon icon.\n\n\n\n To draw rectangle shape, select the rectangle image on the map, a cursor will appear with text \"Click and Drag to draw a rectangle\". To complete the shape release the mouse to complete the drawing.\n\n\n\n Select Get Data to executed the search, all available results will appear within the shapes on the map.",
            "title": "Within An Area"
        },
        {
            "location": "/search-location/within-geospatial-filter/#searching-within-an-area",
            "text": "You can search within a pre-defined area on the map, including an feature to let you draw on the map to find the data you need.",
            "title": "Searching Within an Area"
        },
        {
            "location": "/search-location/within-geospatial-filter/#map-extent",
            "text": "A map extent is the portion of area shown in a map. Map extents usually have a rectangular shape. Map extent can be changed by zooming and panning.",
            "title": "Map Extent"
        },
        {
            "location": "/search-location/within-geospatial-filter/#citywide",
            "text": "Searches boundaries within the City of Chicago.",
            "title": "Citywide"
        },
        {
            "location": "/search-location/within-geospatial-filter/#ward",
            "text": "Searches within a city ward.",
            "title": "Ward"
        },
        {
            "location": "/search-location/within-geospatial-filter/#zip-code",
            "text": "Searches within a city zip code.",
            "title": "Zip Code"
        },
        {
            "location": "/search-location/within-geospatial-filter/#drawn-extent",
            "text": "Drawn Extent is located in the Find Data panel under Select Location; it is used to create polygon and/or rectangle shapes to run results from a specific location on a map. When the Drawn Extent feature is activated the shape, edit, and delete buttons appears on the grid.",
            "title": "Drawn Extent"
        },
        {
            "location": "/search-location/within-geospatial-filter/#how-to-use-drawn-extent",
            "text": "In the find data panel, setup a search and activate drawn extent in the select location section.   Select a shape image on the grid, when hovering on a button, it provides information about the button.   To draw polygon shape, select the polygon image on the map, the image will activate, a cursor will appear with text \"Click to start drawing a shape\".   Begin adding points on the map in the area desired after last point is complete, text will appear \"Click first point to close this shape\". To complete the shape, click finish on the polygon icon.   To draw rectangle shape, select the rectangle image on the map, a cursor will appear with text \"Click and Drag to draw a rectangle\". To complete the shape release the mouse to complete the drawing.   Select Get Data to executed the search, all available results will appear within the shapes on the map.",
            "title": "How to use drawn extent:"
        },
        {
            "location": "/search-location/near-geospatial-filter/",
            "text": "Searching Near a Location\n\uf0c1\n\n\nYou can search around a particular location, such as an address or your current location. Set the radius around the point and find any data within that circle. To search around a particular location, click on \"Select Location\" within the \"Find Data\" panel.\n\n\nSearch Around Me (current location)\n\uf0c1\n\n\n\n\n\n\nSelect \"Me\" from the drop-down menu. For privacy reasons, the user is asked permission to access location information.\n\n\n\n\n\n\nAllow the browser access to your location (this data is not stored). The coordinates are estimated and the accuracy of the coordinates depends on your internet service provider. A blue circle will appear, which shows the estimated area of your current location.\n\n\n\n\n\n\nSelect a radius, the application will use the blue dot as the starting point for your location.\n\n\n\n\nRadius in Feet \u2013 Min (100ft) and Max (1000ft) in 100 foot increments.\n\n\nRadius in Miles \u2013 Min (1/8mi) and Max (1mi) in 1/8th mile increments.\n\n\n\n\n\n\n\n\n\n\nGeo-Location Filter\n\n\nSearch Around a Marker\n\uf0c1\n\n\n\n\nSelect \"Marker\" from the drop-down menu; the marker icon will appear on the grid.\n\n\nClick on the marker icon and begin plotting markers on the map.\n\n\nDefine the radius for the marker/s; if multiple markers are plotted on the map, the search will plot around each marker based off the radius defined.\n\n\n\n\n\n\nNear Marker",
            "title": "Near A Location"
        },
        {
            "location": "/search-location/near-geospatial-filter/#searching-near-a-location",
            "text": "You can search around a particular location, such as an address or your current location. Set the radius around the point and find any data within that circle. To search around a particular location, click on \"Select Location\" within the \"Find Data\" panel.",
            "title": "Searching Near a Location"
        },
        {
            "location": "/search-location/near-geospatial-filter/#search-around-me-current-location",
            "text": "Select \"Me\" from the drop-down menu. For privacy reasons, the user is asked permission to access location information.    Allow the browser access to your location (this data is not stored). The coordinates are estimated and the accuracy of the coordinates depends on your internet service provider. A blue circle will appear, which shows the estimated area of your current location.    Select a radius, the application will use the blue dot as the starting point for your location.   Radius in Feet \u2013 Min (100ft) and Max (1000ft) in 100 foot increments.  Radius in Miles \u2013 Min (1/8mi) and Max (1mi) in 1/8th mile increments.      Geo-Location Filter",
            "title": "Search Around Me (current location)"
        },
        {
            "location": "/search-location/near-geospatial-filter/#search-around-a-marker",
            "text": "Select \"Marker\" from the drop-down menu; the marker icon will appear on the grid.  Click on the marker icon and begin plotting markers on the map.  Define the radius for the marker/s; if multiple markers are plotted on the map, the search will plot around each marker based off the radius defined.    Near Marker",
            "title": "Search Around a Marker"
        },
        {
            "location": "/customize-look/",
            "text": "Color Options\n\uf0c1\n\n\nColor Options is a collapsible link; where data points appearances are manipulated. The color option is only visible when a search is created. Each dataset has a default color theme, but in some circumstances a user may need to change the color option of a data point. \n\n\nCustomizing the color of the dots\n\uf0c1\n\n\nBy default, each dataset is tied to a particular color, but can be adjusted. Change the color of a data point for a dataset by selecting the \"Color\" option. There is a pre-loaded palette of colors that you may select. \n\n\n\n\ndefault color option screen when size slider is not fill places data points on the map\n\n\n\n\noptions color pallet and how it correlates to data points on the grid\n\n\nChanging the size of all dots\n\uf0c1\n\n\n\n\nThe size has a slider feature as an icon that switches between two features.\n\n\nIncrease/decrease the size in data points.\n\n\nChanges the data from standard points on a grid to bubble plotting.\n\n\n\n\n\n\n\n\nChange transparency of the dots\n\uf0c1\n\n\nYou can adjust how transparent each dot appears on the map. By default, the color has an opacity of 85 percent, but can be changed by adjusting the opacity level. This can be especially helpful when there are many dots on the map that crowd your ability to view all of the data.",
            "title": "Customize the Look"
        },
        {
            "location": "/customize-look/#color-options",
            "text": "Color Options is a collapsible link; where data points appearances are manipulated. The color option is only visible when a search is created. Each dataset has a default color theme, but in some circumstances a user may need to change the color option of a data point.",
            "title": "Color Options"
        },
        {
            "location": "/customize-look/#customizing-the-color-of-the-dots",
            "text": "By default, each dataset is tied to a particular color, but can be adjusted. Change the color of a data point for a dataset by selecting the \"Color\" option. There is a pre-loaded palette of colors that you may select.    default color option screen when size slider is not fill places data points on the map   options color pallet and how it correlates to data points on the grid",
            "title": "Customizing the color of the dots"
        },
        {
            "location": "/customize-look/#changing-the-size-of-all-dots",
            "text": "The size has a slider feature as an icon that switches between two features.  Increase/decrease the size in data points.  Changes the data from standard points on a grid to bubble plotting.",
            "title": "Changing the size of all dots"
        },
        {
            "location": "/customize-look/#change-transparency-of-the-dots",
            "text": "You can adjust how transparent each dot appears on the map. By default, the color has an opacity of 85 percent, but can be changed by adjusting the opacity level. This can be especially helpful when there are many dots on the map that crowd your ability to view all of the data.",
            "title": "Change transparency of the dots"
        },
        {
            "location": "/charts-heatmaps/heatmaps/",
            "text": "Data that\u2019s contained in a matrix that has a representation of colors that\u2019s used to visualized complex data for analysis, comparison or trending purposes.\n\n\nTo generate a heat map, expand the table grid located at the bottom of the map. Click on the flame icon to expose the list of available heat options. Choose an option from the list, heatmap begins to generate layering itself over the data on the map.\n\n\nTo remove a heatmap from the grid select the option \"None\" from the droplist or as an alternative click on the \"Layer\" icon on the map; in the \n\"Generated Layers\"\n section deselect the heatmap functionality, this will remove the heatmap from the grid.\n\n\nDroplist of available options:\n\n\n\n\nRainbow\n\n\nThermal\n\n\nWhite/Red/Blue\n\n\nNone",
            "title": "Heatmaps"
        },
        {
            "location": "/charts-heatmaps/tile-map/",
            "text": "How to Create a Tile Map\n\uf0c1\n\n\nTile maps (choropleth) will use shading, instead of individual points, to show the amount of data by different regions. Tile maps can be generated from the table grid window.\n\n\n\n\n\n\nPlot the data you want to display.\n\n\n\n\n\n\nExpand the table grid and hover on the Tile Map icon and select the tile type you want to display.\n\n\n\n\n\n\n\n\n\n\n\n\nTile Map by Zipcode \n\n\nRemoving/Hiding Tile Map\n\uf0c1\n\n\nTo remove the tile from the grid select the option \"None\" from the droplist. Alternatively, you can click on the \"Layer\" button and temporarily hide the tile map from the \n\"Generated Layers\"\n section.",
            "title": "Tile map"
        },
        {
            "location": "/charts-heatmaps/tile-map/#how-to-create-a-tile-map",
            "text": "Tile maps (choropleth) will use shading, instead of individual points, to show the amount of data by different regions. Tile maps can be generated from the table grid window.    Plot the data you want to display.    Expand the table grid and hover on the Tile Map icon and select the tile type you want to display.       Tile Map by Zipcode",
            "title": "How to Create a Tile Map"
        },
        {
            "location": "/charts-heatmaps/tile-map/#removinghiding-tile-map",
            "text": "To remove the tile from the grid select the option \"None\" from the droplist. Alternatively, you can click on the \"Layer\" button and temporarily hide the tile map from the  \"Generated Layers\"  section.",
            "title": "Removing/Hiding Tile Map"
        },
        {
            "location": "/map-layers/",
            "text": "Opening Layers\n\uf0c1\n\n\nLayers display geographic information on a map. Layers are displayed in different formats, shapes or icons such as images, tiles, icons, etc. Layers control the way a user sees different classes of information and how to apply a layer on a map. There are multiple layers used to monitor, track or provide visualization on what's happening around the City of Chicago. Layers also provide information about the area of where the layers overlay. To apply a layer on a map, hover over the layer icon and select a layer type.\n\n\n\nAvailable Layers\n\uf0c1\n\n\n\n    \nBase Layers\n - Displays different views that can be applied on a map.\n        \n\n            \nStreets\n\n            \nBlack and White\n\n            \nAerial\n\n        \n\n    \n\n\n    \nOpen Weather Layers\n - Visual representation of weather data layered on a map.  Weather layers include current and historical information.\n        \n\n            \nCloud Cover\n\n            \nQuantity of Precipitation\n\n            \nSea Level Pressure\n\n            \nTemperature\n\n        \n\n\n    \n\n\n    \nGenerated Layers\n - Are specialized layers derived from an executed quick search or advanced search. The generated layer/s allows the executed data to act as a layer such as being removed from the grid by deselecting the dataset name in the Generated Layers section.\n        \n\n            \nData\n\n            \nHeatmap\n\n            \nTilemap\n\n        \n\n\n\n\n\nOpen Weather Maps\n\uf0c1\n\n\nOpen weather layers are weather data that includes information about the climate. Weather maps are layered on top of existing base map and available via web apps and mobile devices. Weather layers can be applied to the map without a search. To add a weather layer -> expand the layers icon; click on open weather layers and select a layer type.\n\n\n\n\nCloud Cover\n - Overcast by clouds covering the sky. \n\n\n\n\n\n\n\n\nQuantity of Precipitation\n - Responsible for depositing fresh water on the planet by rain, sleet, snow or any act of liquid forms. \n\n\n\n\n\n\n\n\nSea Level Pressure\n - The level of the ocean's surface between high and low tides that measures heights and depths. Sea level changes regularly with the tides and irregularity due to wind and currents.\n\n\n\n\n\n\n\n\nTemperature\n - Displayed in heat matrix of degree of hotness and coldness on a map.",
            "title": "Map Layers"
        },
        {
            "location": "/map-layers/#opening-layers",
            "text": "Layers display geographic information on a map. Layers are displayed in different formats, shapes or icons such as images, tiles, icons, etc. Layers control the way a user sees different classes of information and how to apply a layer on a map. There are multiple layers used to monitor, track or provide visualization on what's happening around the City of Chicago. Layers also provide information about the area of where the layers overlay. To apply a layer on a map, hover over the layer icon and select a layer type.",
            "title": "Opening Layers"
        },
        {
            "location": "/map-layers/#available-layers",
            "text": "Base Layers  - Displays different views that can be applied on a map.\n         \n             Streets \n             Black and White \n             Aerial \n         \n     \n\n     Open Weather Layers  - Visual representation of weather data layered on a map.  Weather layers include current and historical information.\n         \n             Cloud Cover \n             Quantity of Precipitation \n             Sea Level Pressure \n             Temperature \n         \n\n     \n\n     Generated Layers  - Are specialized layers derived from an executed quick search or advanced search. The generated layer/s allows the executed data to act as a layer such as being removed from the grid by deselecting the dataset name in the Generated Layers section.\n         \n             Data \n             Heatmap \n             Tilemap",
            "title": "Available Layers"
        },
        {
            "location": "/map-layers/#open-weather-maps",
            "text": "Open weather layers are weather data that includes information about the climate. Weather maps are layered on top of existing base map and available via web apps and mobile devices. Weather layers can be applied to the map without a search. To add a weather layer -> expand the layers icon; click on open weather layers and select a layer type.   Cloud Cover  - Overcast by clouds covering the sky.      Quantity of Precipitation  - Responsible for depositing fresh water on the planet by rain, sleet, snow or any act of liquid forms.      Sea Level Pressure  - The level of the ocean's surface between high and low tides that measures heights and depths. Sea level changes regularly with the tides and irregularity due to wind and currents.     Temperature  - Displayed in heat matrix of degree of hotness and coldness on a map.",
            "title": "Open Weather Maps"
        },
        {
            "location": "/measure-distances/",
            "text": "Measurement Tool\n\uf0c1\n\n\nMeasurement tool is an interactive feature that allows a user to measure lines and areas on a map. You can use the tool to draw a linear or polygon shape on a map. Selecting the measurement icon will enable the measurement tool to perform the following:\n\n\nLinear Measurement\n\uf0c1\n\n\n\n\nDistance between points\n\n\n\n\nArea Measurement\n\uf0c1\n\n\n\n\nDistance around a point\n\n\n\n\n\n\nLinear Measurement\n\n\n\n\n\n\n\nMultiple Linear Measurement\n\n\n\n\n\n\n\nArea Measurement",
            "title": "Measure Distance"
        },
        {
            "location": "/measure-distances/#measurement-tool",
            "text": "Measurement tool is an interactive feature that allows a user to measure lines and areas on a map. You can use the tool to draw a linear or polygon shape on a map. Selecting the measurement icon will enable the measurement tool to perform the following:",
            "title": "Measurement Tool"
        },
        {
            "location": "/measure-distances/#linear-measurement",
            "text": "Distance between points",
            "title": "Linear Measurement"
        },
        {
            "location": "/measure-distances/#area-measurement",
            "text": "Distance around a point    Linear Measurement    Multiple Linear Measurement    Area Measurement",
            "title": "Area Measurement"
        },
        {
            "location": "/system-administration/opengrid-api/",
            "text": "OpenGrid REST Service \n Application Programming Interface (API)\n\n\n\nVersion 1.4.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nREST Service Resources\n\uf0c1\n\n\nNote:\n See Section 1.2 for information on error responses and other HTTP\nstatus codes used by the service. Also note that \nX-AUTH-TOKEN\n needs to\nbe sent for each calls on the request header with the token obtained by\ncalling \n/users/token\n as described in Section 1.1.1.\n\n\n\nHTTP Status Codes on Response\n\n\n\n\n\nHTTP 401\n is returned when users/token is called and authentication fails.\n\n\n\n\nHTTP 403\n is returned when current user does not have appropriate permissions to access a requested resource. This error code is also returned when the authentication database is unavailable.\n\n\n\n\nHTTP 200\n is returned for any successful request or any handled exceptions. To detect a failure, look for an error object. In case of failure, an error object is returned with the format below:\n \n\n\n\n        {\n          \"error\": {\n            \"code\": \"<error code>\",\n            \"message\": \"<error message>\"\n                }\n    }\n\n\n\n\n        \n\nwhere \nHTTP <error code>\n is a code corresponding to the error that occurred and \nHTTP <error message>\n is a description of the error.\n\n\nHTTP 500\n for any unhandled system errors. The response body will contain details about the error. In most cases, (and this depends on the server infrastructure where the service is deployed) the response body will be an HTML-formatted text.\n\n\n\n\n\nHTTP 204\n (No Content) is returned when an object is deleted successfully (DELETE method where applicable).\n\n\n\n\n\n1.1.1 /users/token\n\n\n\nMethod\n\n\nPOST\n /users/token\n\n\nReturn a JSON Web Token (JWT) token after user id and password have been successfully validated. The JavaScript Web Token expire after 4 hours. The authentication token needs to be renewed prior to expiration by calling /users/renew.\n(See 1.1.2 below)\n\n\n\n\n\nNote on security:\nThe password is currently expected to be sent in plain text (not encrypted). This is partly done to avoid unnecessary complexity. We believe it is best to rely on transport security (HTTPS) to encrypt user credentials.\n\n\n\nSample Request\n\n\n\nRequest Payload:\n\n\n\n    {\n            \"username\": \"admin\",\n            \"password\": \"xxx\"\n        }\n\n\n\n\nSample Response\n\n\n\nThe authentication token is returned, the authentication token consist of three sections separated by dots(\n.\n): \nHEADER.PAYLOAD.SIGNATURE\n; the key X-AUTH-TOKEN is appended to the response header below: \n\n\n\nX-AUTH-TOKEN:\neyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTQzOTMzNjQwNywianRpIjoiYWRtaW4iLCJyb2xlcyI6Im9wZW5ncmlkX2FkbWlucyIsImZuYW1lIjoiT3BlbkdyaWQiLCJsbmFtZSI6IkFkbWluIn0.nShqceUs52ykIxu0RBRp4vZ8zaQqfdZ2haZn8AWMqyq5GJHRQkddoOaaLtKABktr32C0zha1pMJJBrjuYoPHIQ\n\n\n\n\n\nThis token can be parsed using the \njwt_decode\n JavaScript Web Token library (See \n https://github.com/auth0/jwt-decode\n)\n\n\n\n\nError Code\n\n\n\nIf user authentication fails, HTTP status code 401 (Unauthorized) is returned to the requester.\n\n\n\n1.1.2 /users/renew\n\uf0c1\n\n\nMethod\n\n\nPOST\n /users/renew\n\n\nRenew the expiration date on an existing JSON Web Token (JWT) token. The existing token needs to be on the request header under key \nX-AUTH-TOKEN\n.\n\n\nSample Response\n\n\n\nNo response is returned but the authentication token with a new expiration time is appended to the response header, replacing the previous one. See 1.1.1 above for a sample token value.\n\n\n\n1.1.3 /users\n\uf0c1\n\n\nMethod\n\n\nGET\n /users\n\n\n\nReturn a list of users given a filter\n\n\n\nRequest Query Parameters\n\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\nq\n\n\nString\n\n\n\n\nFilter expression to use to search against the Open Grid user repository. Pass \u2018{}\u2019 (empty object) to specify \u2018no filter\u2019 or leave out this parameter altogether.\n The query filter must follow the MongoDB query syntax, as with all other API calls that has a query filter parameter.\n It is recommended that this value be URL encoded.\n\n\n\n\n\n\n\n\n\n\nn\n\n\nInteger\n\n\n\n\nThe maximum number of records to return; If this parameter is not specified, no records are returned (i.e. default value of 0)\n\n\n\n\n\n\n\n\n\n\n\nSample Request\n\n\n\n<Service URL> /users?q={}&n=1000\n\n\n\n\nOr when URL encoded:\n\n\n\n<Service URL>/users?q=%7B%7D&n=1000\n\n\n\n\nSample Response\n\n\n\n[\n {\"_id\":\n       {\"$oid\":\"55ca20b9c4aac050466bc1a3\"}, \n  \"userId\":\"tester1\",\n  \"password\":\"password1\",\n  \"firstName\":\"Tester\",\n  \"lastName\":\"One\",\n  \"groups\":[\"opengrid_users_L1\"]\n } \n]\n\n\n\n\nPOST\n /users\n\n\n\nCreate a new user. Returns object for newly created user, if successful.\n\n\n\nSample Request\n\n\n\n{\n \"id\":null,\n \"o\":{\n    \"userId\":\"test3\",\n        \"password\":\"testxxx\",\n        \"firstName\":\"Test\",\n        \"lastName\":\"Three\",\n        \"groups\":[]\n     }\n}\n\n\n\n\nSample Response\n\n\n\n{\n    \"userId\":\"test3\",\n    \"password\":\"testxxx\",\n    \"firstName\":\"Test\",\n    \"lastName\":\"Three\",\n    \"groups\":[ ],\n    \"_id\":\n        {\"$oid\":\"55ca52dec4aac050466bc1a9\"}\n}\n\n\n\n\n1.1.4 /users/{user_id}\n\uf0c1\n\n\nMethod\n\n\nGET\n /users/{user_id}\n\n\n\nReturn a single user object given the user\u2019s internal id.\n\n\n\nSample Request\n\n\n\n<Service URL>/users/{\"$oid\":\"55b63708a3db5f292c533c7b\"} \n\n\n\n\nor when URL encoded:\n\n\n\n<Service URL>/users/%7B%22%24oid%22%3A%20%2255b63708a3db5f292c533c7b%22%7D\n\n\n\n\nSample Response\n\n\n\n{\n     \"_id\":\n        {\"$oid\":\"55b63708a3db5f292c533c7b\"},\n    \"userId\":\"TesterOne\",\n    \"password\":\"test123\",\n    \"firstName\":\"ABC Test\",\n    \"lastName\":\"One Update\",\n    \"groups\":[\"opengrid_users_L1\"]\n}\n\n\n\n\nPUT\n /users/{user_id}\n\n\n\nUpdate a user\u2019s information. Returns the updated user data, if successful.\n\n\n\nSample Request\n\n\n\nURL:\n\n\n\n<Service URL>/users/{\"$oid\":\"55ccaca15fc6c6bf8a807cf2\"}\n\n\n\n\nor when URL encoded:\n\n\n\n<Service URL>/users/%7B%22$oid%22:%2255ccaca15fc6c6bf8a807cf2%22%7D\n\n\n\n\nRequest Payload:\n\n\n\n{\n    \"id\":{\"$oid\":\"55ccaca15fc6c6bf8a807cf2\"},\n     \"o\":{\n        \"_id\":\n            {\"$oid\":\"55ccaca15fc6c6bf8a807cf2\"},\n        \"userId\":\"twitterUser\",\n        \"password\":\"testxxx\",\n        \"firstName\":\"Twitter\",\n        \"lastName\":\"User\",\n        \"groups\":[\n                \"opengrid_users_L1\",\n                \"opengrid_users_L2\"]\n        }\n}\n\n\n\n\nSample Response\n\n\n\n{\n    \"userId\":\"test3\",\n    \"password\":\"testxxx\",\n    \"firstName\":\"Test\",\n    \"lastName\":\"3\",\n    \"groups\":[ ]\n}\n\n\n\n\n\n\nDELETE\n /user/{user_id}\n\n\nDelete a user given the user\u2019s internal Id on the URL path.\n\n\n\nSample Request\n\n\n\n<Service URL>/users/{\"$oid\":\"55b63708a3db5f292c533c7b\"}\n\n\n\n\nor when URL encoded:\n\n\n\n<Service URL>/users/%7B%22%24oid%22%3A%20%2255b63708a3db5f292c533c7b%22%7D\n\n\n\n\nSample Response\n\n\n\nNo response is returned when a user is deleted successfully.\n\n\n\n1.1.5 /groups\n\uf0c1\n\n\nMethods\n\n\nGET /groups\n\n\nReturn a list of OpenGrid groups (teams)\n\n\n\nRequest Query Parameters\n\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\nq\n\n\n\nString\n\n\n\n\nFilter expression to use to search against the Open Grid group repository. Pass \u2018{}\u2019 (empty object) to specify \u2018no filter\u2019 or leave out this parameter altogether. \n\nIt is recommended that this value be URL encoded.\n\n\n\n\n\n\n\n\n\n\nn\n\n\nInteger\n\n\n\n\n\nThe maximum number of records to return; If this parameter is not specified, no records are returned (i.e. default value of 0)\n\n\n\n\n\n\n\n\n\n\n\n\nSample Request\n\n\n\n<Service URL>/groups?q={}&n=200\n\n\n\n\nOr when URL encoded:\n\n\n\n<Service URL>/groups?q=%7B%7D&n=200\n\n\n\n\nSample Response\n\n\n\n    [\n        {\"_id\" :\n                {\"$oid\":\"55c0c620a3db5f3058630eb3\"},\n        \"groupId\":\"opengrid_users\",\n        \"name\":\"OpenGrid Users\",\n        \"description\":\"Group for all OpenGrid users\", \n        \"enabled\": true,\n        \"functions\": [\n                \"Quick Search\",\n                \"Advanced Search\"],\n        \"datasets\": [\n                \"twitter\",\n                \"weather\"]\n        }\n]\n\n\n\n\nMethod\n\n\nPOST\n /groups\n\n\n\nCreate a new group. Returns object for newly created group, if successful.\n\n\n\nSample Request\n\n\n\n<Service URL>/groups\n\n\n\n\nSample Response\n\n\n\n    {\n        \"groupId\" : \"OPENGRID_NEWGROUP\",\n        \"name\" : \"ABC GROUP\",\n        \"description\" : \"ADD ABC GROUP\",\n        \"enabled\" : true,\n        \"functions\" : [ ],\n        \"datasets\" : [ ],\n        \"_id\": {\"$oid\":\"55cb6362c4aa475d78d4bc40\"}\n        }\n\n\n\n\n1.1.6 /groups/{group_id}\n\uf0c1\n\n\nMethod\n\n\nGET\n/groups/{group_id}\n\n\nReturn a single group given a group\u2019s internal id.\n\n\n\nSample Request\n\n\n\n<Service URL>/groups/{\"$oid\": \"55c0c620a3db5f3058630eb3\"}\n\n\n\n\nor when URL encoded:\n\n\n\n<Service URL>/groups/%7B%22%24oid%22%3A%20%2255c0c620a3db5f3058630eb3%22%7D\n\n\n\n\nSample Response\n\n\n\n[\n  {\n    \"_id\" :\n           {\"$oid\" : \"55c0c620a3db5f3058630eb3\"},\n    \"groupId\" : \"opengrid_users\",\n    \"name\" : \"OpenGrid Users\",\n    \"description\" : \"Group for all OpenGrid users\",\n    \"enabled\" : true,\n    \"functions\" : [\n                \"Quick Search\",\n                \"Advanced Search\"],\n    \"datasets\" : [\n                \"twitter\",\n            \"weather\"]\n  }\n]\n\n\n\n\n\n\nPUT\n/groups/{group_id}\n\n\nUpdate a group (group-level attributes and members). Returns the updated group data, if successful.\n\n\nSample Request\n\n\n\nURL:\n\n\n\n<Service URL>/groups/{\"$oid\":\"55c525c6c4aae748132f4d06\"}\n\n\n\n\nor when URL encoded:\n\n\n\n<Service URL>/groups/%7B%22%24oid%22%3A%2255c525c6c4aae748132f4d06%22%7D\n\n\n\n\nRequest Payload:\n\n\n\n{\n    \"id\":{\"$oid\":\"55c525c6c4aae748132f4d06\"},\n    \"o\": {\n        \"groupId\":\"opengrid_users_L2\",\n            \"name\":\"OpenGrid Users Level 2\",\n            \"description\":\"Users with access to weather data\",\n            \"enabled\":true,\n            \"isAdmin\":false,\n            \"functions\":[\n                \"Quick Search\",\n                \"Advanced Search\"],\n            \"datasets\":[\"weather\"]\n            }\n}\n\n\n\n\nSample Response\n\n\n\n{\n  \"groupId\" : \"opengrid_users_L2\",\n  \"name\" : \"OpenGrid Users Level 2\",\n  \"description\" : \"Users with access to weather data\",\n  \"enabled\" : true,\n  \"isAdmin\" : false,\n  \"functions\" : [\n            \"Quick Search\",\n            \"Advanced Search\"],\n  \"datasets\" : [\"weather\"]\n}\n\n\n\n\nDELETE /groups/{group_id}\n\n\n\nDelete a group given the group\u2019s internal Id on the URL path.\n\n\n\nSample Request\n\n\n\n<Service URL>/groups/{\"$oid\":\"55cb6362c4aa475d78d4bc40\"}\n\n\n\n\nor when URL encoded:\n\n\n\n<Service URL>/groups/%7B%22$oid%22:%2255cb6362c4aa475d78d4bc40%22%7D\n\n\n\n\nSample Response\n\n\n\nNo response is returned when a group is deleted successfully.\n\n\n\n1.1.7 /datasets\n\uf0c1\n\n\nMethod\n \n\nGET\n /datasets\n\n\nReturn a list of available datasets. The response is a JSON array of descriptors for each available dataset.\n\n\nSample Request\n\n\n\n<Service URL>/datasets\n\n\n\n\nSample Response\n\n\n\n    [\n        {\n            \"id\" : \"twitter\",\n            \"displayName\" : \"Twitter\",\n            \"options\": {\"rendition\":\n                        {\n                                \"icon\" : \"default\",\n                            \"color\" : \"#001F7A\",\n                            \"fillColor\" : \"#00FFFF\",\n                            \"opacity\" : 85,\n                            \"size\" : 6\n                                    },\n                    \"supportedOperators\" : [    {\n                                                \"dataType\" : \"string\", \n                                                \"operators\" : [\n                                                            \"equal\", \n                                                            \"not_equal\", \n                                                            \"in\", \n                                                            \"begins_with\", \n                                                            \"contains\"\n                                                                ]\n                                                    }       \n                                        ],\n                        \"quickSearch\" : {\n                                \"enable\" : true, \n                                \"triggerAlias\" : \"twe\", \n                                \"triggerWord\" : \"tweet\", \n                                \"hintCaption\" : \"Search Tweets\", \n                                \"hintExample\" : \"tweet 'food'\"\n                                                    }\n                    },              \n                \"columns\":\n                        [\n                            {\n                                \"id\" : \"_id\",\n                                \"displayName\" : \"ID\",\n                                \"dataType\" : \"string\",\n                                \"filter\" : false,\n                                \"popup\" : false,\n                                \"list\" : false\n                                        },\n                            {\n                                \"id\" : \"date\",\n                                \"displayName\" : \"Date\",\n                                \"dataType\" : \"date\",\n                                \"filter\" : true,\n                                \"popup\" : true,\n                                \"list\" : true,\n                                \"sortOrder\" : 1\n                                        },\n                            {                \n                                \"id\": \"screenName\",\n                                \"displayName\" : \"Screen Name\",\n                                \"dataType\" : \"string\",\n                                \"filter\" : true,\n                                \"popup\" : true,\n                                \"list\" : true,\n                                \"sortOrder\" : 2,\n                                \"groupBy\" : true,\n                                \"quickSearch\" : true\n                                            },\n                            {   \n                                \"id\" : \"text\",\n                                \"displayName\" : \"Text\",\n                                \"dataType\" : \"string\",\n                                \"filter\" : true,\n                                \"popup\" : true,\n                                \"list\" : true,\n                                \"sortOrder\": 3,\n                                \"quickSearch\" : true\n                                            },\n                            {\n                                \"id\" : \"city\",\n                                \"displayName\" : \"City\",\n                                \"dataType\" : \"string\",\n                                \"filter\" : true,\n                                \"popup\" : true,\n                                \"list\" : true,\n                                \"sortOrder\" : 4,\n                                \"groupBy\" : true,\n                                \"quickSearch\" : true\n                                            },\n                            {\n                                \"id\" :\"bio\",\n                                \"displayName\" : \"Bio\",\n                                \"dataType\" : \"string\",\n                                \"sortOrder\" : 5\n                                            },\n                            {\n                                \"id\" : \"hashtags\",\n                                \"displayName\" : \"Hashtags\",\n                                \"dataType\" : \"string\",\n                                \"sortOrder\" : 6\n                                            },\n                            {\n                                \"id\" : \"lat\",\n                                \"displayName\" : \"Latitude\",\n                                \"dataType\" : \"float\",\n                                \"list\" : true,\n                                \"sortOrder\" : 7\n                                            },\n                            {\n                                \"id\" : \"long\",\n                                \"displayName\" : \"Longitude\",\n                                \"dataType\" : \"float\",\n                                \"list\" : true,\n                                \"sortOrder\" : 8\n                                            }\n                        ]\n            },  \n        {\n            \"id\" : \"weather\",\n            \"displayName\" : \"Weather\",\n            \"options\" : {\"rendition\":\n                           {\n                            \"icon\" : \"default\",\n                            \"color\" : \"#8c2d04\",\n                            \"fillColor\" : \"#fdae6b\",\n                            \"opacity\" : 85,\n                            \"size\" : 6\n                                    }\n                    },\n            \"columns\":\n                    [\n                        { \n                        \"id\": \"_id\",\n                        \"displayName\" : \"ID\",\n                        \"dataType\" : \"string\",\n                        \"filter\" : false,\n                        \"popup\" : false,\n                        \"list\" : false\n                                    },\n                        {\n                        \"id\" : \"temp\",\n                        \"displayName\" : \"Temperature\",\n                        \"dataType\" : \"float\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 1\n                                    },\n                        {   \n                        \"id\" : \"windspeed\",\n                        \"displayName\" : \"Wind Speed\",\n                        \"dataType\" : \"float\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 2\n                                    },\n                       {\n                        \"id\" : \"condition\",\n                        \"displayName\" : \"Condition\",\n                        \"dataType\" : \"string\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 3\n                                    },\n                    {\n                        \"id\" : \"humidity\",\n                        \"displayName\" : \"Humidity\",\n                        \"dataType\" : \"float\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 4\n                                    },\n                    {\n                        \"id\" : \"precipIntensity\",\n                        \"displayName\" : \"Precipitation Intensity\",\n                        \"dataType\" : \"float\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true ,\n                        \"sortOrder\" : 5\n                                    },\n                    {\n                         \"id\" : \"date\",\n                         \"displayName\" : \"Date\",\n                         \"dataType\" : \"date\",\n                         \"filter\" : true,\n                         \"popup\" : true,\n                         \"list\" : true,\n                         \"sortOrder\" : 5\n                                          },\n                         {\n                        \"id\" : \"zipcode\",\n                        \"displayName\" : \"Zip Code\",\n                        \"dataType\" : \"string\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 6,\n                        \"values\" : [ 60601 , 60602],\n                        \"groupBy\" : true\n                                    },\n                      {\n                            \"id\" :\"forecast\",\n                            \"displayName\" : \"Today's Forecast\",\n                            \"dataType\" : \"string\",\n                            \"popup\" : true, \n                            \"list\" : true ,\n                            \"sortOrder\" : 7\n                                            },\n                      {\n                            \"id\" : \"icon\",\n                            \"displayName\" : \"Icon\",\n                            \"dataType\" : \"graphic\", \n                            \"popup\" : true,\n                            \"sortOrder\" : 7\n                                           },\n                      {\n                            \"id\" : \"lat\",\n                            \"displayName\" : \"Latitude\",\n                            \"dataType\" : \"float\",\n                            \"list\" : true ,\n                            \"sortOrder\" : 8\n                                           },\n                      {\n                            \"id\" : \"long\",\n                            \"displayName\" : \"Longitude\",\n                            \"dataType\" : \"float\",\n                            \"list\" : true,\n                            \"sortOrder\" : 9\n                                           }\n           ]\n        }\n   ]                 \n\n\n\n\n\n1.1.8 /datasets/{dataset_id}\n\uf0c1\n\n\nMethod\n\n\nGET\n /datasets/(dataset_id}\n\n\n\nReturn a single dataset descriptor. An HTTP 403 is returned when the user has no access to the dataset requested. \n\n\n\nSample Request\n\n\n\n<Service URL>/datasets/twitter\n\n\n\n\nSample Response\n\n\n\n{\n    \"id\" : \"twitter\",\n    \"displayName\" : \"Twitter\",\n    \"options\": {\"rendition\":\n                      { \n                    \"icon\" : \"default\",\n                    \"color\" : \"#001F7A\",\n                    \"fillColor\" : \"#00FFFF\",\n                    \"opacity\" : 85,\n                    \"size\" : 6\n                                },\n           \"supportedOperators\" : [  \n                         {\n                                    \"dataType\" : \"string\", \n                                    \"operators\" : [\n                                                \"equal\", \n                                                \"not_equal\", \n                                                \"in\", \n                                                \"begins_with\", \n                                                \"contains\"\n                                                    ]\n                                    }       \n                                  ],\n            \"chart\" : {\n                    \"xAxisField\" : \"date\", \n                    \"xAxisLabel\" : \"Post Date\"\n                }                                 \n            },\n            \"quickSearch\" : {\n                    \"enable\" : true, \n                    \"triggerAlias\" : \"twe\", \n                    \"triggerWord\" : \"tweet\", \n                    \"hintCaption\" : \"Search Tweets\", \n                    \"hintExample\" : \"tweet 'food'\"\n                                        }\n    \"columns\" :\n            [\n                   {\n                \"id\" : \"_id\",\n                \"displayName\" : \"ID\",\n                \"dataType\" : \"string\",\n                \"filter\" : false,\n                \"popup\" : false,\n                \"list\" : false\n                            },\n                {\n                \"id\" : \"date\",\n                \"displayName\" : \"Date\",\n                \"dataType\" : \"date\",\n                \"filter\" : true,\n                \"popup\" : true,\n                \"list\" : true,\n                \"sortOrder\": 1\n                            },\n                {\n                \"id\" : \"screenName\",\n                \"displayName\" : \"Screen Name\",\n                \"dataType\" : \"string\",\n                \"filter\" : true,\n                \"popup\" : true,\n                \"list\" : true,\n                \"sortOrder\" : 2,\n                \"groupBy\" : true\n                            },\n                {\n                \"id\" : \"text\",\n                \"displayName\" : \"Text\",\n                \"dataType\" : \"string\",\n                \"filter\" : true,\n                \"popup\" : true,\n                \"list\" : true,\n                \"sortOrder\" : 3\n                            },\n                {\n                \"id\" : \"city\",\n                \"displayName\" : \"City\",\n                \"dataType\" : \"string\",\n                \"filter\" : true,\n                \"popup\" : true,\n                \"list\" : true ,\n                \"sortOrder\" : 4,\n                \"groupBy\" : true\n                            },\n                {\n                \"id\" : \"bio\",\n                \"displayName\" : \"Bio\",\n                \"dataType\" : \"string\",\n                \"sortOrder\" : 5\n                            },\n                 {\n                \"id\" : \"hashtags\",\n                \"displayName\" : \"Hashtags\",\n                \"dataType\" : \"string\",\n                \"sortOrder\" : 6\n                            },\n                 {\n                \"id\" : \"lat\",\n                \"displayName\" : \"Latitude\",\n                \"dataType\" : \"float\",\n                \"list\" : true ,\n                \"sortOrder\" : 7\n                            },\n                  {\n                \"id\" : \"long\",\n                \"displayName\" : \"Longitude\",\n                \"dataType\" : \"float\",\n                \"list\" : true,\n                \"sortOrder\" : 8\n                            }\n            ]\n    }\n\n\n\n\nNew in 1.4.0\n\n\n\nTwo new column properties were introduced as part of the 1.4.0 release:\n\n\n\narray\n - a flag to indicate that the column contains array-type values\n\n\ndotSizer\n - an object specifying how the dot size will be calculated dynamically. \n\n\n\nFor example, a value like below will calculate the dot size using the given formula depending on the value of this column as represented by the @v token:\n\n\"dotSizer\" : {\n    \"calculator\" : \"(Math.sqrt(@v) * 2.5) + 2\"\n}\n\n1.1.9 /datasets/{dataset_id}/query\n\n\nMethod\n\n\nGET\n/datasets/{dataset_id}/query\n\n\nExecute a query against a specific dataset.\n\n\n\nRequest Query Parameters\n\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\nq\n\n\n\nString\n\n\n\n\n\nFilter expression to use to against the specified dataset Pass \u2018{}\u2019 (empty object) to specify \u2018no filter\u2019 or leave out this parameter altogether.\n\n\n\n\nThe query filter must follow the MongoDB query syntax, as with all other API calls that has a query filter parameter.\n \nIt is recommended that this value be URL encoded.\n\n\n\n\n\n\n\n\n\n\nn\n\n\nInteger\n\n\nThe maximum number of records to return; If this parameter is not specified, no records are returned (i.e. default value of 0)\n\n\n\n\n\n\n\n\n\nopts\n\n\nJSON string\n\n\nOptional parameters that can be passed depending on service capabilities. This value needs to be encoded for the call to work as expected. \"geoFilter\" is an attribute supported as of Release 1.1.0 and should be a valid geoJson geometry value.\n\n\n\n\n\n\n\n\n\n\n\nSample Request\n\n\n\n<Service URL>/datasets/twitter/query?q={\"$and\":[{\"text\":{\"$regex\":\"happy\"}}]}&n=1&opts={\"geoFilter\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-87.63304710388184,41.89278978584501],[-87.61206150054932,41.89278978584501],[-87.61206150054932,41.88140002416609],[-87.63304710388184,41.88140002416609],[-87.63304710388184,41.89278978584501]]]]}}\n\n\n\n\nOr when URL encoded:\n\n\n\n<Service URL>/datasets/twitter/query?q=%7B%22$and%22:%5B%7B%22text%22:%7B%22$regex%22:%22happy%22%7D%7D%5D%7D&n=6000&opts=%7B%22geoFilter%22:%7B%22type%22:%22MultiPolygon%22,%22coordinates%22:%5B%5B%5B%5B-87.63304710388184,41.89278978584501%5D,%5B-87.61206150054932,41.89278978584501%5D,%5B-87.61206150054932,41.88140002416609%5D,%5B-87.63304710388184,41.88140002416609%5D,%5B-87.63304710388184,41.89278978584501%5D%5D%5D%5D%7D%7D\n\n\n\n\nSample Response\n\n\n\n{\n    \"type\" : \"FeatureCollection\", \n    \"features\" :\n            [\n                {\n                    \"type\": \"Feature\", \n                    \"properties\": \n                            {\n                                \"_id\" : {\"$oid\" : \"556e6f18aef407e1dc98685e\"},\n                                \"date\" : \"05/02/2012 8:24 AM\",\n                                \"screenName\" : \"DeeeEmmm\",\n                                \"text\" : \"Just talked to bleep last nyt.... Felt happy, but sad in a lot of ways....\",\n                                \"city\" : \"Chicago, IL\",\n                                \"bio\" : \"I'm the female version of Ari Gold!\",\n                                \"lat\" : 41.84770456,\n                                \"long\" : -87.8521837,\n                                \"hashtags\" : \"\"\n                                            },\n                    \"geometry\":\n                            {\n                                \"type\": \"Point\",\n                                \"coordinates\": [-87.8521837,41.84770456]\n                                        },\n                    \"autoPopup\": false\n                    }   \n                ],\n    \"meta\":\n        { \n            \"view\":\n                     {\n                    \"id\" : \"twitter\",\n                    \"displayName\" : \"Twitter\",\n                    \"options\":\n                               {\"rendition\" :\n                                      {\n                                    \"icon\" : \"default\",\n                                    \"color\" : \"#001F7A\",\n                                    \"fillColor\" : \"#00FFFF\",\n                                    \"opacity\" : 85,\n                                    \"size\" : 6\n                                                }\n                            },\n            \"columns\" : \n                    [\n                       {\n                        \"id\" : \"_id\", \n                        \"displayName\" : \"ID\", \n                        \"dataType\" : \"string\",\n                        \"filter\" : false,\n                        \"popup\" : false,\n                        \"list\" : false\n                                    },\n                       {\n                        \"id\" : \"date\",\n                        \"displayName\" : \"Date\",\n                        \"dataType\" : \"date\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 1\n                                    },\n                       {\n                        \"id\" : \"screenName\",\n                        \"displayName\" : \"Screen Name\",\n                        \"dataType\" : \"string\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 2,\n                        \"groupBy\" : true\n                                    },\n                       {\n                        \"id\" : \"text\",\n                        \"displayName\" : \"Text\",\n                        \"dataType\" : \"string\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 3\n                                    },\n                       {    \n                        \"id\" : \"city\",\n                        \"displayName\" : \"City\",\n                        \"dataType\" : \"string\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 4,\n                            \"groupBy\" : true\n                                     },\n                       {\n                        \"id\" : \"bio\",\n                        \"displayName\" : \"Bio\",\n                        \"dataType\" : \"string\",\n                        \"sortOrder\" : 5\n                                    },\n                       {\n                        \"id\" : \"hashtags\",\n                        \"displayName\" : \"Hashtags\",\n                        \"dataType\" : \"string\",\n                        \"sortOrder\" : 6\n                                    },\n                       {\n                        \"id\" : \"lat\",\n                        \"displayName\" : \"Latitude\",\n                        \"dataType\" : \"float\",\n                        \"list\" : true,\n                        \"sortOrder\" : 7\n                                    },\n                       {        \n                        \"id\" : \"long\",\n                        \"displayName\" : \"Longitude\",\n                        \"dataType\" : \"float\",\n                        \"list\" : true,\n                        \"sortOrder\" : 8\n                                    }\n                    ]\n                } \n        }\n    }\n\n\n\n\nMethod\n\n\n\nPOST\n/datasets/{dataset_id}/query\n\n\n\nExecute a query against a specific dataset. The POST method is now supported to accomodate bigger request payloads primarily due to geo-spatial filters (for OpenGrid services that support geo-spatial filtering)\n\n\n\nRequest Parameters\n\n\n\nThe parameter names are the same as the ones on the GET method above except that they should be passed as form data. See Sample request payload below.\n\n\n\nSample Request Payload\n\n\n\n------WebKitFormBoundaryOvluSdchMLVGg7rd\nContent-Disposition: form-data; name=\"q\"\n\n{}\n------WebKitFormBoundaryOvluSdchMLVGg7rd\nContent-Disposition: form-data; name=\"n\"\n\n6000\n------WebKitFormBoundaryOvluSdchMLVGg7rd\nContent-Disposition: form-data; name=\"opts\"\n\n    {\n        \"geoFilter\":\n                {\"type\":\n                    \"MultiPolygon\",\n                    \"coordinates\":[\n                            [\n                               [\n                                [-87.65630722045898,41.89850786255543], \n                                [-87.60510921478273,41.89850786255543],\n                                [-87.60510921478273,41.87588812018588], \n                                [-87.65630722045898,41.87588812018588],\n                                [-87.65630722045898,41.89850786255543]\n                              ]\n                            ]\n                            ]\n                 }\n     }\n------WebKitFormBoundaryOvluSdchMLVGg7rd--\n\n\n\n\nSample Response\n\n\n\nSee sample response for the GET method above.\n\n\n\n1.1.10 /queries\n\n\n\nMethod\n\n\n\nGET\n /queries\n\n\n\nReturn list of all queries that user has access to. A user has access to all queries he or she has created and those shared with his groups or shared with him directly by other users.\n\n\n\nRequest Query Parameters\n\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\nq\n\n\n\nString\n\n\n\n\n\n\nFilter expression to use. Pass \u2018{}\u2019 (empty object) to specify \u2018no filter\u2019 or leave out this parameter altogether.\n\n\nIt is recommended that this value be URL encoded.\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\nInteger\n\n\n\n\n\n\nmaximum number of records to return; If this parameter is not specified, no records are returned (i.e. default value of 0).\n\n\n\n\n\n\n\n\n\n\n\nSample Request\n\n\n\n<Service URL>/queries?n=1\n\n\n\n\nSample Response\n\n\n\n[\n    {\"_id\" :\n            {\"$oid\" : \"5582f831a3db5f4190e4707a\"},\n     \"name\" : \"Weather Records for 60601\",\n     \"owner\" : \"jsmith\",\n     \"spec\" :\n           [\n            {\n                   \"dataSetId\" : \"weather\",\n               \"filters\" : {\n                          \"condition\" : \"AND\",\n                      \"rules\" :  [\n                            {\n                                \"id\" : \"zipcode\",\n                                \"field\" : \"zipcode\",\n                                \"type\" : \"string\",\n                                \"input\" : \"text\",\n                                \"operator\" : \"equal\",\n                                \"value\" : \"60601\"\n                                              }\n                                                        ]\n                         },\n               \"rendition\" : {\n                            \"color\" : \"#DC143C\",\n                        \"opacity\" : 85,\n                        \"size\" : 6\n                                }\n                }\n             ],\n        \"sharedWith\" :\n                    {\n                \"users\" : [ ],\n                \"groups\" : [ ]\n                        },\n        \"isCommon\" : true\n      }\n]\n\n\n\n\n\nPOST\n/queries\n\n\n\nCreate a new query. Returns object for newly created query, if successful.\n\n\n\nSample Request\n\n\n\nRequest Payload\n\n\n\n{\n       \"o\":{\n        \"name\":\"Tweets By Bud\",\n        \"owner\":\"user1\",\n            \"spec\":[\n                           {\n                      \"dataSetId\":\"twitter\",\n                      \"filters\":{\n                            \"condition\":\"AND\",\n                            \"rules\":[\n                                        {\n                                    \"id\":\"screenName\",\n                                    \"field\":\"screenName\",\n                                    \"type\":\"string\",\n                                    \"input\":\"text\",\n                                    \"operator\":\"contains\",\n                                    \"value\":\"bud\"\n                                                }\n                                    ]\n                             },\n                    \"rendition\":{\n                            \"color\":\"#DC143C\",\n                            \"opacity\":\"85\",\n                            \"size\":\"6\"\n                                    }\n                    }\n                  ],\n          \"sharedWith\":{\n                    \"users\":[],\n                    \"groups\":[]\n                            },\n          \"isCommon\":false,\n          \"autoRefresh\":false,\n          \"refreshInterval\":\"30\",\n          \"geoFilter\":{\n                    \"boundaryType\":\"within\",\n                    \"boundary\": \"\"\n                            }\n    }\n}\n\n\n\n\nSample Response\n\n\n\n    {\n        \"name\" : \"Tweets By Bud\",\n        \"owner\" : \"user1\",\n        \"spec\" : [{\n                \"dataSetId\" : \"twitter\",\n                 \"filters\" : {\n                        \"condition\" : \"AND\",\n                        \"rules\" : [ {\n                                \"id\" : \"screenName\",\n                                \"field\" : \"screenName\",\n                                \"type\" : \"string\",\n                                \"input\" : \"text\",\n                                \"operator\" : \"contains\",\n                                \"value\" : \"bud\"\n                                   } ]\n                        },\n                \"rendition\" : {\n                            \"color\" : \"#DC143C\",\n                            \"opacity\" : \"85\",\n                            \"size\" : \"6\"\n                            }\n             }],\n         \"sharedWith\" : {\n                    \"users\" : [ ],\n                    \"groups\" : [ ]\n                        },\n        \"isCommon\" : false,\n        \"autoRefresh\" : false,\n        \"refreshInterval\" : \"30\",\n        \"geoFilter\" : \n                { \n                    \"boundaryType\" : \"within\",\n                    \"boundary\" : \"\"\n                            },\n        \"_id\" : { \"$oid\" : \"55df5ec39900ec81a481b0f6\"}\n    }\n\n\n\n\n\n 1.1.11 /queries/{query_id}\n\n\n\nMethod\n\n\n\nGET\n /queries/{query_id}\n\n\n\nReturn a single query given a query\u2019s internal id.\n\n\n\nSample Request\n\n\n\n<Service URL>/queries/{\"$oid\":\"5582f831a3db5f4190e4707a\"} \n\n\n\n\nor when URL encoded:\n\n\n\n<Service URL>/queries/%7B%22$oid%22:%5582f831a3db5f4190e4707a%22%7D\n\n\n\n\nSample Response\n\n\n\n    [\n        {\"_id\":\n                 { \"$oid\" : \"5582f831a3db5f4190e4707a\"},\n          \"name\" : \"Weather Records for 60601\",\n          \"owner\" : \"jsmith\", \n          \"spec\" : [{\n                    \"dataSetId\" : \"weather\",\n                \"filters\" : { \n                        \"condition\" : \"AND\",\n                        \"rules\" : \n                                [{\n                                    \"id\" : \"zipcode\",\n                                    \"field\" : \"zipcode\",\n                                    \"type\" : \"string\",\n                                    \"input\" : \"text\",\n                                    \"operator\" : \"equal\",\n                                    \"value\" : \"60601\"\n                                                }]\n                           },\n                \"rendition\": {\n                        \"color\" : \"#DC143C\",\n                        \"opacity\" : 85,\n                        \"size\" : 6\n                                }\n              }],\n        \"sharedWith\" : {\n                    \"users\" : [ ],\n                    \"groups\" : [ ]\n                            },\n        \"isCommon\" : true}\n    ]\n\n\n\n\nPUT\n /queries/{query_id}\n\n\n\nUpdate a query. Returns the updated query object, if successful.\n\n\n\nSample Request\n\n\n\nURL:\n\n\n\n<Service URL>/queries/{\"$oid\":\"55c52cf6c4aa31b24b04d620\"} \n\n\n\n\nor when URL encoded:\n\n\n\n<Service URL>/queries/%7B%22$oid%22:%2255c52cf6c4aa31b24b04d620%22%7D\n\n\n\n\nSample Response\n\n\n\n    {\n        \"name\" : \"Tweets on coupon\",\n        \"owner\" : \"user1\", \n        \"spec\" : [{ \n                \"dataSetId\" : \"twitter\",\n                \"filters\": {\n                        \"condition\" : \"AND\",\n                        \"rules\" : [{\n                                \"id\" : \"text\",\n                                \"field\" : \"text\",\n                                \"type\" : \"string\",\n                                \"input\" : \"text\",\n                                \"operator\" : \"contains\",\n                                \"value\" : \"coupon\"\n                                                }]\n                    },\n                \"rendition\" : {\n                            \"color\" : \"#DC143C\",\n                            \"opacity\" : \"85\",\n                            \"size\" : \"6\"\n                                        }\n             }],\n        \"sharedWith\" : {\n                    \"users\" : [ ],\n                    \"groups\" : [ ]\n                                },\n        \"isCommon\" : false,\n        \"autoRefresh\" : false,\n        \"refreshInterval\" : \"30\",\n        \"_id\" : {\"$oid\" : \"55c52cf6c4aa31b24b04d620\"},\n        \"geoFilter\" : {\n                \"boundaryType\" : \"within\",\n                \"boundary\" : \"\"\n                                }\n    }\n\n\n\n\nDELETE\n /queries/{query_id}\n\n\n\nDelete a query given the query\u2019s internal Id on the URL path.\n\n\n\nSample Request\n\n\n\n<Service URL>/queries/{\"$oid\":\"55cb6362c4aa475d78d4bc40\"}\n\n\n\n\nor when URL encoded:\n\n\n\n<Service URL>/queries/%7B%22%24oid%22%3A%2255cb6362c4aa475d78d4bc40%22%7D \n\n\n\n\nSample Response\n\n\n\nNo response is returned when a query is deleted.\n\n\n\n\n\nBack to top",
            "title": "API"
        },
        {
            "location": "/system-administration/opengrid-api/#rest-service-resources",
            "text": "Note:  See Section 1.2 for information on error responses and other HTTP\nstatus codes used by the service. Also note that  X-AUTH-TOKEN  needs to\nbe sent for each calls on the request header with the token obtained by\ncalling  /users/token  as described in Section 1.1.1.",
            "title": "REST Service Resources"
        },
        {
            "location": "/system-administration/opengrid-api/#112-usersrenew",
            "text": "Method  POST  /users/renew  Renew the expiration date on an existing JSON Web Token (JWT) token. The existing token needs to be on the request header under key  X-AUTH-TOKEN .  Sample Response  No response is returned but the authentication token with a new expiration time is appended to the response header, replacing the previous one. See 1.1.1 above for a sample token value.",
            "title": "1.1.2 /users/renew"
        },
        {
            "location": "/system-administration/opengrid-api/#113-users",
            "text": "Method  GET  /users  Return a list of users given a filter  Request Query Parameters     Parameter  Value  Description    q  String   Filter expression to use to search against the Open Grid user repository. Pass \u2018{}\u2019 (empty object) to specify \u2018no filter\u2019 or leave out this parameter altogether.  The query filter must follow the MongoDB query syntax, as with all other API calls that has a query filter parameter.  It is recommended that this value be URL encoded.     n  Integer   The maximum number of records to return; If this parameter is not specified, no records are returned (i.e. default value of 0)      Sample Request  <Service URL> /users?q={}&n=1000  Or when URL encoded:  <Service URL>/users?q=%7B%7D&n=1000  Sample Response  [\n {\"_id\":\n       {\"$oid\":\"55ca20b9c4aac050466bc1a3\"}, \n  \"userId\":\"tester1\",\n  \"password\":\"password1\",\n  \"firstName\":\"Tester\",\n  \"lastName\":\"One\",\n  \"groups\":[\"opengrid_users_L1\"]\n } \n]  POST  /users  Create a new user. Returns object for newly created user, if successful.  Sample Request  {\n \"id\":null,\n \"o\":{\n    \"userId\":\"test3\",\n        \"password\":\"testxxx\",\n        \"firstName\":\"Test\",\n        \"lastName\":\"Three\",\n        \"groups\":[]\n     }\n}  Sample Response  {\n    \"userId\":\"test3\",\n    \"password\":\"testxxx\",\n    \"firstName\":\"Test\",\n    \"lastName\":\"Three\",\n    \"groups\":[ ],\n    \"_id\":\n        {\"$oid\":\"55ca52dec4aac050466bc1a9\"}\n}",
            "title": "1.1.3 /users"
        },
        {
            "location": "/system-administration/opengrid-api/#114-usersuser_id",
            "text": "Method  GET  /users/{user_id}  Return a single user object given the user\u2019s internal id.  Sample Request  <Service URL>/users/{\"$oid\":\"55b63708a3db5f292c533c7b\"}   or when URL encoded:  <Service URL>/users/%7B%22%24oid%22%3A%20%2255b63708a3db5f292c533c7b%22%7D  Sample Response  {\n     \"_id\":\n        {\"$oid\":\"55b63708a3db5f292c533c7b\"},\n    \"userId\":\"TesterOne\",\n    \"password\":\"test123\",\n    \"firstName\":\"ABC Test\",\n    \"lastName\":\"One Update\",\n    \"groups\":[\"opengrid_users_L1\"]\n}  PUT  /users/{user_id}  Update a user\u2019s information. Returns the updated user data, if successful.  Sample Request  URL:  <Service URL>/users/{\"$oid\":\"55ccaca15fc6c6bf8a807cf2\"}  or when URL encoded:  <Service URL>/users/%7B%22$oid%22:%2255ccaca15fc6c6bf8a807cf2%22%7D  Request Payload:  {\n    \"id\":{\"$oid\":\"55ccaca15fc6c6bf8a807cf2\"},\n     \"o\":{\n        \"_id\":\n            {\"$oid\":\"55ccaca15fc6c6bf8a807cf2\"},\n        \"userId\":\"twitterUser\",\n        \"password\":\"testxxx\",\n        \"firstName\":\"Twitter\",\n        \"lastName\":\"User\",\n        \"groups\":[\n                \"opengrid_users_L1\",\n                \"opengrid_users_L2\"]\n        }\n}  Sample Response  {\n    \"userId\":\"test3\",\n    \"password\":\"testxxx\",\n    \"firstName\":\"Test\",\n    \"lastName\":\"3\",\n    \"groups\":[ ]\n}   DELETE  /user/{user_id}  Delete a user given the user\u2019s internal Id on the URL path.  Sample Request  <Service URL>/users/{\"$oid\":\"55b63708a3db5f292c533c7b\"}  or when URL encoded:  <Service URL>/users/%7B%22%24oid%22%3A%20%2255b63708a3db5f292c533c7b%22%7D  Sample Response  No response is returned when a user is deleted successfully.",
            "title": "1.1.4 /users/{user_id}"
        },
        {
            "location": "/system-administration/opengrid-api/#115-groups",
            "text": "Methods  GET /groups  Return a list of OpenGrid groups (teams)  Request Query Parameters     Parameter  Value  Description    \nq  String   Filter expression to use to search against the Open Grid group repository. Pass \u2018{}\u2019 (empty object) to specify \u2018no filter\u2019 or leave out this parameter altogether.  \nIt is recommended that this value be URL encoded.     n  Integer   \nThe maximum number of records to return; If this parameter is not specified, no records are returned (i.e. default value of 0)      Sample Request  <Service URL>/groups?q={}&n=200  Or when URL encoded:  <Service URL>/groups?q=%7B%7D&n=200  Sample Response      [\n        {\"_id\" :\n                {\"$oid\":\"55c0c620a3db5f3058630eb3\"},\n        \"groupId\":\"opengrid_users\",\n        \"name\":\"OpenGrid Users\",\n        \"description\":\"Group for all OpenGrid users\", \n        \"enabled\": true,\n        \"functions\": [\n                \"Quick Search\",\n                \"Advanced Search\"],\n        \"datasets\": [\n                \"twitter\",\n                \"weather\"]\n        }\n]  Method  POST  /groups  Create a new group. Returns object for newly created group, if successful.  Sample Request  <Service URL>/groups  Sample Response      {\n        \"groupId\" : \"OPENGRID_NEWGROUP\",\n        \"name\" : \"ABC GROUP\",\n        \"description\" : \"ADD ABC GROUP\",\n        \"enabled\" : true,\n        \"functions\" : [ ],\n        \"datasets\" : [ ],\n        \"_id\": {\"$oid\":\"55cb6362c4aa475d78d4bc40\"}\n        }",
            "title": "1.1.5 /groups"
        },
        {
            "location": "/system-administration/opengrid-api/#116-groupsgroup_id",
            "text": "Method  GET /groups/{group_id}  Return a single group given a group\u2019s internal id.  Sample Request  <Service URL>/groups/{\"$oid\": \"55c0c620a3db5f3058630eb3\"}  or when URL encoded:  <Service URL>/groups/%7B%22%24oid%22%3A%20%2255c0c620a3db5f3058630eb3%22%7D  Sample Response  [\n  {\n    \"_id\" :\n           {\"$oid\" : \"55c0c620a3db5f3058630eb3\"},\n    \"groupId\" : \"opengrid_users\",\n    \"name\" : \"OpenGrid Users\",\n    \"description\" : \"Group for all OpenGrid users\",\n    \"enabled\" : true,\n    \"functions\" : [\n                \"Quick Search\",\n                \"Advanced Search\"],\n    \"datasets\" : [\n                \"twitter\",\n            \"weather\"]\n  }\n]   PUT /groups/{group_id}  Update a group (group-level attributes and members). Returns the updated group data, if successful.  Sample Request  URL:  <Service URL>/groups/{\"$oid\":\"55c525c6c4aae748132f4d06\"}  or when URL encoded:  <Service URL>/groups/%7B%22%24oid%22%3A%2255c525c6c4aae748132f4d06%22%7D  Request Payload:  {\n    \"id\":{\"$oid\":\"55c525c6c4aae748132f4d06\"},\n    \"o\": {\n        \"groupId\":\"opengrid_users_L2\",\n            \"name\":\"OpenGrid Users Level 2\",\n            \"description\":\"Users with access to weather data\",\n            \"enabled\":true,\n            \"isAdmin\":false,\n            \"functions\":[\n                \"Quick Search\",\n                \"Advanced Search\"],\n            \"datasets\":[\"weather\"]\n            }\n}  Sample Response  {\n  \"groupId\" : \"opengrid_users_L2\",\n  \"name\" : \"OpenGrid Users Level 2\",\n  \"description\" : \"Users with access to weather data\",\n  \"enabled\" : true,\n  \"isAdmin\" : false,\n  \"functions\" : [\n            \"Quick Search\",\n            \"Advanced Search\"],\n  \"datasets\" : [\"weather\"]\n}  DELETE /groups/{group_id}  Delete a group given the group\u2019s internal Id on the URL path.  Sample Request  <Service URL>/groups/{\"$oid\":\"55cb6362c4aa475d78d4bc40\"}  or when URL encoded:  <Service URL>/groups/%7B%22$oid%22:%2255cb6362c4aa475d78d4bc40%22%7D  Sample Response  No response is returned when a group is deleted successfully.",
            "title": "1.1.6 /groups/{group_id}"
        },
        {
            "location": "/system-administration/opengrid-api/#117-datasets",
            "text": "Method   GET  /datasets  Return a list of available datasets. The response is a JSON array of descriptors for each available dataset.  Sample Request  <Service URL>/datasets  Sample Response      [\n        {\n            \"id\" : \"twitter\",\n            \"displayName\" : \"Twitter\",\n            \"options\": {\"rendition\":\n                        {\n                                \"icon\" : \"default\",\n                            \"color\" : \"#001F7A\",\n                            \"fillColor\" : \"#00FFFF\",\n                            \"opacity\" : 85,\n                            \"size\" : 6\n                                    },\n                    \"supportedOperators\" : [    {\n                                                \"dataType\" : \"string\", \n                                                \"operators\" : [\n                                                            \"equal\", \n                                                            \"not_equal\", \n                                                            \"in\", \n                                                            \"begins_with\", \n                                                            \"contains\"\n                                                                ]\n                                                    }       \n                                        ],\n                        \"quickSearch\" : {\n                                \"enable\" : true, \n                                \"triggerAlias\" : \"twe\", \n                                \"triggerWord\" : \"tweet\", \n                                \"hintCaption\" : \"Search Tweets\", \n                                \"hintExample\" : \"tweet 'food'\"\n                                                    }\n                    },              \n                \"columns\":\n                        [\n                            {\n                                \"id\" : \"_id\",\n                                \"displayName\" : \"ID\",\n                                \"dataType\" : \"string\",\n                                \"filter\" : false,\n                                \"popup\" : false,\n                                \"list\" : false\n                                        },\n                            {\n                                \"id\" : \"date\",\n                                \"displayName\" : \"Date\",\n                                \"dataType\" : \"date\",\n                                \"filter\" : true,\n                                \"popup\" : true,\n                                \"list\" : true,\n                                \"sortOrder\" : 1\n                                        },\n                            {                \n                                \"id\": \"screenName\",\n                                \"displayName\" : \"Screen Name\",\n                                \"dataType\" : \"string\",\n                                \"filter\" : true,\n                                \"popup\" : true,\n                                \"list\" : true,\n                                \"sortOrder\" : 2,\n                                \"groupBy\" : true,\n                                \"quickSearch\" : true\n                                            },\n                            {   \n                                \"id\" : \"text\",\n                                \"displayName\" : \"Text\",\n                                \"dataType\" : \"string\",\n                                \"filter\" : true,\n                                \"popup\" : true,\n                                \"list\" : true,\n                                \"sortOrder\": 3,\n                                \"quickSearch\" : true\n                                            },\n                            {\n                                \"id\" : \"city\",\n                                \"displayName\" : \"City\",\n                                \"dataType\" : \"string\",\n                                \"filter\" : true,\n                                \"popup\" : true,\n                                \"list\" : true,\n                                \"sortOrder\" : 4,\n                                \"groupBy\" : true,\n                                \"quickSearch\" : true\n                                            },\n                            {\n                                \"id\" :\"bio\",\n                                \"displayName\" : \"Bio\",\n                                \"dataType\" : \"string\",\n                                \"sortOrder\" : 5\n                                            },\n                            {\n                                \"id\" : \"hashtags\",\n                                \"displayName\" : \"Hashtags\",\n                                \"dataType\" : \"string\",\n                                \"sortOrder\" : 6\n                                            },\n                            {\n                                \"id\" : \"lat\",\n                                \"displayName\" : \"Latitude\",\n                                \"dataType\" : \"float\",\n                                \"list\" : true,\n                                \"sortOrder\" : 7\n                                            },\n                            {\n                                \"id\" : \"long\",\n                                \"displayName\" : \"Longitude\",\n                                \"dataType\" : \"float\",\n                                \"list\" : true,\n                                \"sortOrder\" : 8\n                                            }\n                        ]\n            },  \n        {\n            \"id\" : \"weather\",\n            \"displayName\" : \"Weather\",\n            \"options\" : {\"rendition\":\n                           {\n                            \"icon\" : \"default\",\n                            \"color\" : \"#8c2d04\",\n                            \"fillColor\" : \"#fdae6b\",\n                            \"opacity\" : 85,\n                            \"size\" : 6\n                                    }\n                    },\n            \"columns\":\n                    [\n                        { \n                        \"id\": \"_id\",\n                        \"displayName\" : \"ID\",\n                        \"dataType\" : \"string\",\n                        \"filter\" : false,\n                        \"popup\" : false,\n                        \"list\" : false\n                                    },\n                        {\n                        \"id\" : \"temp\",\n                        \"displayName\" : \"Temperature\",\n                        \"dataType\" : \"float\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 1\n                                    },\n                        {   \n                        \"id\" : \"windspeed\",\n                        \"displayName\" : \"Wind Speed\",\n                        \"dataType\" : \"float\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 2\n                                    },\n                       {\n                        \"id\" : \"condition\",\n                        \"displayName\" : \"Condition\",\n                        \"dataType\" : \"string\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 3\n                                    },\n                    {\n                        \"id\" : \"humidity\",\n                        \"displayName\" : \"Humidity\",\n                        \"dataType\" : \"float\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 4\n                                    },\n                    {\n                        \"id\" : \"precipIntensity\",\n                        \"displayName\" : \"Precipitation Intensity\",\n                        \"dataType\" : \"float\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true ,\n                        \"sortOrder\" : 5\n                                    },\n                    {\n                         \"id\" : \"date\",\n                         \"displayName\" : \"Date\",\n                         \"dataType\" : \"date\",\n                         \"filter\" : true,\n                         \"popup\" : true,\n                         \"list\" : true,\n                         \"sortOrder\" : 5\n                                          },\n                         {\n                        \"id\" : \"zipcode\",\n                        \"displayName\" : \"Zip Code\",\n                        \"dataType\" : \"string\",\n                        \"filter\" : true,\n                        \"popup\" : true,\n                        \"list\" : true,\n                        \"sortOrder\" : 6,\n                        \"values\" : [ 60601 , 60602],\n                        \"groupBy\" : true\n                                    },\n                      {\n                            \"id\" :\"forecast\",\n                            \"displayName\" : \"Today's Forecast\",\n                            \"dataType\" : \"string\",\n                            \"popup\" : true, \n                            \"list\" : true ,\n                            \"sortOrder\" : 7\n                                            },\n                      {\n                            \"id\" : \"icon\",\n                            \"displayName\" : \"Icon\",\n                            \"dataType\" : \"graphic\", \n                            \"popup\" : true,\n                            \"sortOrder\" : 7\n                                           },\n                      {\n                            \"id\" : \"lat\",\n                            \"displayName\" : \"Latitude\",\n                            \"dataType\" : \"float\",\n                            \"list\" : true ,\n                            \"sortOrder\" : 8\n                                           },\n                      {\n                            \"id\" : \"long\",\n                            \"displayName\" : \"Longitude\",\n                            \"dataType\" : \"float\",\n                            \"list\" : true,\n                            \"sortOrder\" : 9\n                                           }\n           ]\n        }\n   ]",
            "title": "1.1.7 /datasets"
        },
        {
            "location": "/system-administration/opengrid-api/#118-datasetsdataset_id",
            "text": "Method  GET  /datasets/(dataset_id}  Return a single dataset descriptor. An HTTP 403 is returned when the user has no access to the dataset requested.   Sample Request  <Service URL>/datasets/twitter  Sample Response  {\n    \"id\" : \"twitter\",\n    \"displayName\" : \"Twitter\",\n    \"options\": {\"rendition\":\n                      { \n                    \"icon\" : \"default\",\n                    \"color\" : \"#001F7A\",\n                    \"fillColor\" : \"#00FFFF\",\n                    \"opacity\" : 85,\n                    \"size\" : 6\n                                },\n           \"supportedOperators\" : [  \n                         {\n                                    \"dataType\" : \"string\", \n                                    \"operators\" : [\n                                                \"equal\", \n                                                \"not_equal\", \n                                                \"in\", \n                                                \"begins_with\", \n                                                \"contains\"\n                                                    ]\n                                    }       \n                                  ],\n            \"chart\" : {\n                    \"xAxisField\" : \"date\", \n                    \"xAxisLabel\" : \"Post Date\"\n                }                                 \n            },\n            \"quickSearch\" : {\n                    \"enable\" : true, \n                    \"triggerAlias\" : \"twe\", \n                    \"triggerWord\" : \"tweet\", \n                    \"hintCaption\" : \"Search Tweets\", \n                    \"hintExample\" : \"tweet 'food'\"\n                                        }\n    \"columns\" :\n            [\n                   {\n                \"id\" : \"_id\",\n                \"displayName\" : \"ID\",\n                \"dataType\" : \"string\",\n                \"filter\" : false,\n                \"popup\" : false,\n                \"list\" : false\n                            },\n                {\n                \"id\" : \"date\",\n                \"displayName\" : \"Date\",\n                \"dataType\" : \"date\",\n                \"filter\" : true,\n                \"popup\" : true,\n                \"list\" : true,\n                \"sortOrder\": 1\n                            },\n                {\n                \"id\" : \"screenName\",\n                \"displayName\" : \"Screen Name\",\n                \"dataType\" : \"string\",\n                \"filter\" : true,\n                \"popup\" : true,\n                \"list\" : true,\n                \"sortOrder\" : 2,\n                \"groupBy\" : true\n                            },\n                {\n                \"id\" : \"text\",\n                \"displayName\" : \"Text\",\n                \"dataType\" : \"string\",\n                \"filter\" : true,\n                \"popup\" : true,\n                \"list\" : true,\n                \"sortOrder\" : 3\n                            },\n                {\n                \"id\" : \"city\",\n                \"displayName\" : \"City\",\n                \"dataType\" : \"string\",\n                \"filter\" : true,\n                \"popup\" : true,\n                \"list\" : true ,\n                \"sortOrder\" : 4,\n                \"groupBy\" : true\n                            },\n                {\n                \"id\" : \"bio\",\n                \"displayName\" : \"Bio\",\n                \"dataType\" : \"string\",\n                \"sortOrder\" : 5\n                            },\n                 {\n                \"id\" : \"hashtags\",\n                \"displayName\" : \"Hashtags\",\n                \"dataType\" : \"string\",\n                \"sortOrder\" : 6\n                            },\n                 {\n                \"id\" : \"lat\",\n                \"displayName\" : \"Latitude\",\n                \"dataType\" : \"float\",\n                \"list\" : true ,\n                \"sortOrder\" : 7\n                            },\n                  {\n                \"id\" : \"long\",\n                \"displayName\" : \"Longitude\",\n                \"dataType\" : \"float\",\n                \"list\" : true,\n                \"sortOrder\" : 8\n                            }\n            ]\n    }",
            "title": "1.1.8 /datasets/{dataset_id}"
        },
        {
            "location": "/system-administration/architecture/",
            "text": "Application Architecture\n\uf0c1\n\n\nOpenGrid consists of a user interface layer that is seen by the user in the web browser and a service layer. The service layer is responsible for interpreting commands from the user interface to an underlying data layer. In turn, the user interface communicates with the service layer through an \nApplication Programmer Interface (API)\n. \n\n\n\n\nThe service layer share the same API to communicate with the user interface, but are compatible with different data store engines. This approach will make it easier to maintain a consistent user interface, but allow it to be compatible with different databases and APIs as these tend to change or different data storage engines often change over time.\n\n\nOpenGrid is compatible with \nMongoDB\n or \nPlenario\n. MongoDB's service layer was created by the City of Chicago and \navailable in this repository\n. The service layer for Plenario was created by Smart Chicago Collaborative and \navailable here\n.\n\n\nMongoDB or Plenario?\n\uf0c1\n\n\nMongoDB is a flexible, JSON-based data engine that lets you easily store data with minimal concerns about designing a schema. Plenario is a storage engine which quickly and easily stores open data from \nSocrata\n, such as \nCity of Chicago\n, or CKAN like the \nU.S. government\n data portals. Plenario makes all of these data available through a simple API.\n\n\nMongoDB is a great solution for on-site deployments or when using data not readily available on Socrata or CKAN. It is an open-source, supurbly documented database that can be installed on-site and behind a firewall. The City of Chicago, for instance, uses OpenGrid + MongoDB to power an internal version of OpenGrid, dubbed \nWindyGrid\n, that loads data from internal systems.\n\n\nPlenario quickly ingests data from popular open data portal platforms, Socrata and CKAN. But it is more difficult to upload data from other sources, such as databases. Therefore, pairing OpenGrid with Plenario (with the corresponding service layer) works great to visualize open data. Adding data from an open data portal is simple, see \nPlenario's documentation for adding a data set\n. An example of OpenGrid + Plenario can be seen at \nhttps://chicago.opengrid.io\n. \n\n\nPlenar.io test service layer\n\uf0c1\n\n\nA publicly-available instance of the Plenar.io service layer is at \nhttp://opengrid-service-dev-1134290206.us-west-2.elb.amazonaws.com/opengrid-service/\n\n\nUse this end-point to test any changes you have made to the OpenGrid application that relies on Plenario, but does not require the setup of the service layer.\n\n\nLinks\n\uf0c1\n\n\n\n\nOpenGrid user interface repo\n\n\nOpenGrid Serivce layer API\n\n\nMongoDB-compatible service layer repo\n\n\nPlenario service layer repo\n\n\nPlenario serice layer development end-point",
            "title": "App Architecture"
        },
        {
            "location": "/system-administration/architecture/#application-architecture",
            "text": "OpenGrid consists of a user interface layer that is seen by the user in the web browser and a service layer. The service layer is responsible for interpreting commands from the user interface to an underlying data layer. In turn, the user interface communicates with the service layer through an  Application Programmer Interface (API) .    The service layer share the same API to communicate with the user interface, but are compatible with different data store engines. This approach will make it easier to maintain a consistent user interface, but allow it to be compatible with different databases and APIs as these tend to change or different data storage engines often change over time.  OpenGrid is compatible with  MongoDB  or  Plenario . MongoDB's service layer was created by the City of Chicago and  available in this repository . The service layer for Plenario was created by Smart Chicago Collaborative and  available here .",
            "title": "Application Architecture"
        },
        {
            "location": "/system-administration/architecture/#mongodb-or-plenario",
            "text": "MongoDB is a flexible, JSON-based data engine that lets you easily store data with minimal concerns about designing a schema. Plenario is a storage engine which quickly and easily stores open data from  Socrata , such as  City of Chicago , or CKAN like the  U.S. government  data portals. Plenario makes all of these data available through a simple API.  MongoDB is a great solution for on-site deployments or when using data not readily available on Socrata or CKAN. It is an open-source, supurbly documented database that can be installed on-site and behind a firewall. The City of Chicago, for instance, uses OpenGrid + MongoDB to power an internal version of OpenGrid, dubbed  WindyGrid , that loads data from internal systems.  Plenario quickly ingests data from popular open data portal platforms, Socrata and CKAN. But it is more difficult to upload data from other sources, such as databases. Therefore, pairing OpenGrid with Plenario (with the corresponding service layer) works great to visualize open data. Adding data from an open data portal is simple, see  Plenario's documentation for adding a data set . An example of OpenGrid + Plenario can be seen at  https://chicago.opengrid.io .",
            "title": "MongoDB or Plenario?"
        },
        {
            "location": "/system-administration/architecture/#plenario-test-service-layer",
            "text": "A publicly-available instance of the Plenar.io service layer is at  http://opengrid-service-dev-1134290206.us-west-2.elb.amazonaws.com/opengrid-service/  Use this end-point to test any changes you have made to the OpenGrid application that relies on Plenario, but does not require the setup of the service layer.",
            "title": "Plenar.io test service layer"
        },
        {
            "location": "/system-administration/architecture/#links",
            "text": "OpenGrid user interface repo  OpenGrid Serivce layer API  MongoDB-compatible service layer repo  Plenario service layer repo  Plenario serice layer development end-point",
            "title": "Links"
        },
        {
            "location": "/system-administration/installation-and-setup/",
            "text": "Installation and Setup\n\uf0c1\n\n\nOnce the application sources are downloaded and built, the distributable packages can be deployed to your web server (in case of the OpenGrid user interface) and application server (service layer).\n\n\nInstructions for building the release packages can be found below:\n\n\n\n\n\n User Interface Build Procedures\n\n\n\n\n\n\nService Layer Build Procedures\n\n\n\n\n\n\nOverview\n\uf0c1\n\n\nTechnical Requirements\n\uf0c1\n\n\n\n\nA web server for hosting User Interface application\n\n\nAn Java EE application server for deploying service layer (the service template implementation has been tested with \nJBoss EAP 6.2\n)\n\n\nMongoDB version 3.0.6\n for storing data and template service layer configuration\n\n\n\n\nInstallation\n\uf0c1\n\n\nService Layer\n\uf0c1\n\n\nDatabase Configuration (MongoDB)\n\uf0c1\n\n\n\n\nThe OpenGrid Service Layer template implementation utilizes a MongoDB instance to store and retrieve test datasets. Two sample datasets are made available by the service: tweets and weather. Assuming that a  MongoDB instance is already installed, import the test data by running the mongoimport utility for each json file similar to below:\n\n\n\n\nmongoimport --host <mongodb hostname> --port <port #> --username <userid> --password <password> --collection <target collection name> --db <dbname> --file <file location>\n\n\n\n\nThe json files to import can be found in ./opengridservice/src/test/data folder under the opengrid-svc-template project. Use the first part of the the json file name as the target collection name.\n\n\nFor example to import the opengrid_users collection, you can run the following:\n\n\nmongoimport --host <mongodb hostname> --port <port #> --username <userid> --password <password> --collection opengrid_users --db <dbname> --file ./test/data/opengrid_users.json\n\n\n\n\nBy default, an admin user is created with user id 'admin' and password 'admin123'.\n\n\nInstallation and Setup\n\uf0c1\n\n\n\n\nFollow the steps described in the Service Layer Build Procedures above making sure that the application.properties file is updated with the appropriate MongoDB connection string. A war file is generated after the build process which can be deployed to an application server of your choice.\n\n\n\n\nUser Interface\n\uf0c1\n\n\n\n\nConfigure various application settings as required by your application by editing \nsrc/js/custom/Config.js\n. The settings include session timeout, area to limit address quick searches, to name a few. See \nOpenGrid Configuration\n for more details\n\n\nUpdate service URL to point to service URL configured above by editing \nconfig/EnvSettings.js\n. \nEnvSettings.js\n is meant to contain settings that are environment-specific e.g. Dev, Qa or Production, etc. and overrides any settings as specified in \nConfig.js\n mentioned above.\n\n\n\n\nAfter a successful build as documented on the \nUser Interface Build Procedures\n, a \n/dist\n folder is created with the files necessary for deployment to a web server. Copy all the files from the \n/dist\n folder, including sub-folders, to your application's root folder on the web server.",
            "title": "Installation and Setup"
        },
        {
            "location": "/system-administration/installation-and-setup/#installation-and-setup",
            "text": "Once the application sources are downloaded and built, the distributable packages can be deployed to your web server (in case of the OpenGrid user interface) and application server (service layer).  Instructions for building the release packages can be found below:    User Interface Build Procedures    Service Layer Build Procedures",
            "title": "Installation and Setup"
        },
        {
            "location": "/system-administration/installation-and-setup/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/system-administration/installation-and-setup/#technical-requirements",
            "text": "A web server for hosting User Interface application  An Java EE application server for deploying service layer (the service template implementation has been tested with  JBoss EAP 6.2 )  MongoDB version 3.0.6  for storing data and template service layer configuration",
            "title": "Technical Requirements"
        },
        {
            "location": "/system-administration/installation-and-setup/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/system-administration/installation-and-setup/#service-layer",
            "text": "",
            "title": "Service Layer"
        },
        {
            "location": "/system-administration/installation-and-setup/#database-configuration-mongodb",
            "text": "The OpenGrid Service Layer template implementation utilizes a MongoDB instance to store and retrieve test datasets. Two sample datasets are made available by the service: tweets and weather. Assuming that a  MongoDB instance is already installed, import the test data by running the mongoimport utility for each json file similar to below:   mongoimport --host <mongodb hostname> --port <port #> --username <userid> --password <password> --collection <target collection name> --db <dbname> --file <file location>  The json files to import can be found in ./opengridservice/src/test/data folder under the opengrid-svc-template project. Use the first part of the the json file name as the target collection name.  For example to import the opengrid_users collection, you can run the following:  mongoimport --host <mongodb hostname> --port <port #> --username <userid> --password <password> --collection opengrid_users --db <dbname> --file ./test/data/opengrid_users.json  By default, an admin user is created with user id 'admin' and password 'admin123'.",
            "title": "Database Configuration (MongoDB)"
        },
        {
            "location": "/system-administration/installation-and-setup/#installation-and-setup_1",
            "text": "Follow the steps described in the Service Layer Build Procedures above making sure that the application.properties file is updated with the appropriate MongoDB connection string. A war file is generated after the build process which can be deployed to an application server of your choice.",
            "title": "Installation and Setup"
        },
        {
            "location": "/system-administration/installation-and-setup/#user-interface",
            "text": "Configure various application settings as required by your application by editing  src/js/custom/Config.js . The settings include session timeout, area to limit address quick searches, to name a few. See  OpenGrid Configuration  for more details  Update service URL to point to service URL configured above by editing  config/EnvSettings.js .  EnvSettings.js  is meant to contain settings that are environment-specific e.g. Dev, Qa or Production, etc. and overrides any settings as specified in  Config.js  mentioned above.   After a successful build as documented on the  User Interface Build Procedures , a  /dist  folder is created with the files necessary for deployment to a web server. Copy all the files from the  /dist  folder, including sub-folders, to your application's root folder on the web server.",
            "title": "User Interface"
        },
        {
            "location": "/system-administration/build-procedures/",
            "text": "Download OpenGrid code\n\uf0c1\n\n\n\ngit clone https://github.com/Chicago/opengrid.git\n\n\n\nInstall Dependencies\n\uf0c1\n\n\nInstall PhantomJS by following the instructions on this \npage\n.\n\n\nInstall \nnpm\n, if you haven't yet.\n\n\nOnce installed, download and install the necessary npm modules by running the \ninstall\n command.\n\n\ncd opengrid\nnpm install\n\n\n\nCustomize/Configure\n\uf0c1\n\n\nEdit the \nsrc/js/custom/Config.js\n and \nconfig/EnvSettings.js\n files. \nEnvSettings.js\n overrides default settings specified in \nConfig.js\n (build system can be configured later to pull a different copy of \nEnvSettings.js\n depending on the application environment i.e. Test, Production, etc). At a minimum, the \nservice endpoint\n setting in \nEnvSettings.js\n must be edited to point to the correct location of the OpenGrid-compliant service.\n\n\nFor the build procedures of a template implementation of the OpenGrid Service Layer, please refer to this \nlink\n.\n\n\nRun Gulp Tasks\n\uf0c1\n\n\nThe application uses \nGulp\n as its build system and \nMocha\n for its test framework.\n\n\nDebug Task\n\uf0c1\n\n\nThe \ndebug\n task creates a debug build under the \n./debug\n folder. The debug build injects local file references into the main HTML page for debugging purposes.\n\n\ngulp debug\n\n\n\nTest Task\n\uf0c1\n\n\nThe \ntest\n task runs all the Mocha unit tests.\n\n\ngulp test\n\n\n\nRelease Task\n\uf0c1\n\n\nThe \nrelease\n task creates a release build under the \n./dist\n folder. The release build runs the lint and test tasks, and minifies the application and third-party Javascript and CSS files. \nrelease\n is the default Gulp task.\n\n\ngulp release\n\n\n\nDeploy\n\uf0c1\n\n\nDeploy the files under the \n./dist\n folder to your web server. For quick preview using Node.js, you can use the npm module \nnode-http-server\n. \n\n\nNote: As of this writing, OpenGrid has an open issue for supporting cross-domain service calls. Currently, you'll have to open the application in Chrome with the \n--disable-web-security\n parameter if the service \nlives\n under a different domain.",
            "title": "Build Procedures"
        },
        {
            "location": "/system-administration/build-procedures/#download-opengrid-code",
            "text": "git clone https://github.com/Chicago/opengrid.git",
            "title": "Download OpenGrid code"
        },
        {
            "location": "/system-administration/build-procedures/#install-dependencies",
            "text": "Install PhantomJS by following the instructions on this  page .  Install  npm , if you haven't yet.  Once installed, download and install the necessary npm modules by running the  install  command. \ncd opengrid\nnpm install",
            "title": "Install Dependencies"
        },
        {
            "location": "/system-administration/build-procedures/#customizeconfigure",
            "text": "Edit the  src/js/custom/Config.js  and  config/EnvSettings.js  files.  EnvSettings.js  overrides default settings specified in  Config.js  (build system can be configured later to pull a different copy of  EnvSettings.js  depending on the application environment i.e. Test, Production, etc). At a minimum, the  service endpoint  setting in  EnvSettings.js  must be edited to point to the correct location of the OpenGrid-compliant service.  For the build procedures of a template implementation of the OpenGrid Service Layer, please refer to this  link .",
            "title": "Customize/Configure"
        },
        {
            "location": "/system-administration/build-procedures/#run-gulp-tasks",
            "text": "The application uses  Gulp  as its build system and  Mocha  for its test framework.",
            "title": "Run Gulp Tasks"
        },
        {
            "location": "/system-administration/build-procedures/#debug-task",
            "text": "The  debug  task creates a debug build under the  ./debug  folder. The debug build injects local file references into the main HTML page for debugging purposes. \ngulp debug",
            "title": "Debug Task"
        },
        {
            "location": "/system-administration/build-procedures/#test-task",
            "text": "The  test  task runs all the Mocha unit tests. \ngulp test",
            "title": "Test Task"
        },
        {
            "location": "/system-administration/build-procedures/#release-task",
            "text": "The  release  task creates a release build under the  ./dist  folder. The release build runs the lint and test tasks, and minifies the application and third-party Javascript and CSS files.  release  is the default Gulp task. \ngulp release",
            "title": "Release Task"
        },
        {
            "location": "/system-administration/build-procedures/#deploy",
            "text": "Deploy the files under the  ./dist  folder to your web server. For quick preview using Node.js, you can use the npm module  node-http-server .   Note: As of this writing, OpenGrid has an open issue for supporting cross-domain service calls. Currently, you'll have to open the application in Chrome with the  --disable-web-security  parameter if the service  lives  under a different domain.",
            "title": "Deploy"
        },
        {
            "location": "/system-administration/opengrid-configuration/",
            "text": "OpenGrid Configuration\n\uf0c1\n\n\nOne easy way to customize OpenGrid's behavior is to set the various available configuration options in \nsrc/js/custom/Config.js\n.\n\n\nThe settings are described below.\n\n\nAvailable Settings\n\uf0c1\n\n\nbrand\n\uf0c1\n\n\n\n\napplicationName\n - application name used on login screen, window title, and top navigation pane\n\n\ncopyright\n - placeholder for copyright information; not currently used by application (internal use only)\n\n\nversion\n - placeholder for version info; not currently  used by application (internal use only)\n\n\n\n\nsession\n\uf0c1\n\n\n\n\ntimeout\n - session timeout, in minutes; if no user activity is detected (including mouse, keyboard and query requests) within this \ntime period, the user is automatically logged out and redirected to the login screen\n\n\ntokenRenewalInterval\n - token renewal interval in minutes; the application uses tokens to securely send credential information \nto the service layer; the security token is initially generated by the service and has an expiration (4 hours by default); this setting should \nbe set to a value less than the expiration period on the service side to prevent any session interruptions (manifest as permission errors on the UI) caused by\nexpired token\n\n\n\n\nalerts\n\uf0c1\n\n\n\n\nautoCloseDuration\n - number of milliseconds the alert message will be displayed; this is the window that displays when there are informational or error messages\n\n\n\n\ntable\n\uf0c1\n\n\nVarious table-related settings; these are \npass-through\n settings that normally don't need to be changed\n\n\nmap\n\uf0c1\n\n\n\n\nbaseLayers\n - layer information including Leaflet-supported URL of the layer (See http://leafletjs.com/reference.html#tilelayer for more info)\n\n\noverlayLayers\n - layer information for overlays; much like the baseLayers, the overlayLayers need URLs that point to a Leaflet-supported map service\n\n\nmapLibraryOptions.center\n - default map center in Latitude/Longitude\n\n\nmapLibraryOptions.zoom\n - default map zoom (use higher value to zoom in)\n\n\nmapLibraryOptions.minZoom\n - map's minimum zoom level\n\n\nmapLibraryOptions.imagePath\n - default path for images used by Leaflet; there is no need to change this, in most cases\n\n\nzoomToResultsExtent\n - flag to indicate if the map will auto-zoom after a 'manual' search (via quick or advanced search, not auto-refresh)\n\n\nmeasureOptions\n - some settings used by the measuring tool class\n\n\ntileMapOptions\n - tile map options to be made available on the UI; shapeMap setting is an instance of ogrid.ShapeMap class that exposes a shape map data (geoJson) representing a boundary\n\n\n\n\nquickSearch\n\uf0c1\n\n\n\n\nmock\n - for testing use only (deprecated)\n\n\nplugins\n - list of plug-ins for handling quick searches\n\n\nhelpFile\n - quick search help content\n\n\nplugInOptions\n - options used by quick search plug-ins; right now, only the Places plug-in, the default plug-in that gets called when no other plug-in matches the quick search text, is reading these settings\n\n\nplaces.esriGeocodeBBox\n - the bounding box used for the ArcGIS World Geocoder service to perform the address/POI search within the given extent; bounding rectangle coordinates can be entered as a simple comma-separated string in the format \n,\n\n\nplaces.esriGeocodeLocation\n - Longitude/Latitude value that represents the center of the search area; if more than 1 search results are returned by the service, the results nearest to this point will appear first on the list of results\n\n\nplaces.esriGeocodeMaxResults\n - maximum results to be returned by the ArcGIS Geocode service\n\n\nplaces.esriGeocodeFilterUsingShape\n - when specific address/locations are returned by the ArcGIS Geocoder service, the search results are filtered to make sure only results inside this \nshape\n or boundary are returned\n\n\n\n\nadvancedSearch\n\uf0c1\n\n\n\n\ngeoFilterBoundaries\n - boundaries used on Advanced Search; the data attribute should be set to a geoJson value that represents the boundary\n\n\n\n\ncommandBar\n\uf0c1\n\n\n\n\ncommands\n - list of buttons and required security level\n\n\nmobileBreakPointWidth\n - width value of the browser window used for internally determining if application is in \nmobile mode\n or in normal mode (note that this should be in sync with the value used by Bootstrap/bootstrap.css for its media queries)\n\n\n\n\nservice\n\uf0c1\n\n\n\n\nendpoint\n - the endpoint of the service layer that OpenGrid application calls; this is the default setting used which is overriden by the one found in \nconfig/EnvSettings.js\n\n\ntimeout\n - the timeout value of every service call, in milliseconds; if a service call times out, an alert message is displayed\n\n\nmaxresults\n - the maximum number of rows to return for a query\n\n\nauthUrl\n - the URL of the operation to use for retrieving a security token during the login process; there is usually no need to change this unless the service layer is configured or developed to use a different URL\n\n\nauthRenewUrl\n - the URL of the operation to use for renewing a security token\n\n\nerrorHandler\n - internal setting to indicate the class to use for handling some exceptions\n\n\ndateFormat\n - data format used for converting string to date value for comparing dates on auto-refresh highlighting; this is dependent on the format used by the underlying service\n\n\nautoLogin\n - flag to indicate if login page will be displayed or if application will automatically login using credentials specified in \nautologinUserId\n and \nautologinPassword\n\n\nautologinUserId\n - user id to use for internal login when autoLogin is set to 'true'\n\n\nautologinPassword\n - password to use for internal login when autoLogin is set to 'true'\n\n\n\n\nhelp\n\uf0c1\n\n\n\n\nurl\n - url to use for the application help link\n\n\ntype\n - the type of help link: 'icon' or 'button'",
            "title": "Configuration"
        },
        {
            "location": "/system-administration/opengrid-configuration/#opengrid-configuration",
            "text": "One easy way to customize OpenGrid's behavior is to set the various available configuration options in  src/js/custom/Config.js .  The settings are described below.",
            "title": "OpenGrid Configuration"
        },
        {
            "location": "/system-administration/opengrid-configuration/#available-settings",
            "text": "",
            "title": "Available Settings"
        },
        {
            "location": "/system-administration/opengrid-configuration/#brand",
            "text": "applicationName  - application name used on login screen, window title, and top navigation pane  copyright  - placeholder for copyright information; not currently used by application (internal use only)  version  - placeholder for version info; not currently  used by application (internal use only)",
            "title": "brand"
        },
        {
            "location": "/system-administration/opengrid-configuration/#session",
            "text": "timeout  - session timeout, in minutes; if no user activity is detected (including mouse, keyboard and query requests) within this \ntime period, the user is automatically logged out and redirected to the login screen  tokenRenewalInterval  - token renewal interval in minutes; the application uses tokens to securely send credential information \nto the service layer; the security token is initially generated by the service and has an expiration (4 hours by default); this setting should \nbe set to a value less than the expiration period on the service side to prevent any session interruptions (manifest as permission errors on the UI) caused by\nexpired token",
            "title": "session"
        },
        {
            "location": "/system-administration/opengrid-configuration/#alerts",
            "text": "autoCloseDuration  - number of milliseconds the alert message will be displayed; this is the window that displays when there are informational or error messages",
            "title": "alerts"
        },
        {
            "location": "/system-administration/opengrid-configuration/#table",
            "text": "Various table-related settings; these are  pass-through  settings that normally don't need to be changed",
            "title": "table"
        },
        {
            "location": "/system-administration/opengrid-configuration/#map",
            "text": "baseLayers  - layer information including Leaflet-supported URL of the layer (See http://leafletjs.com/reference.html#tilelayer for more info)  overlayLayers  - layer information for overlays; much like the baseLayers, the overlayLayers need URLs that point to a Leaflet-supported map service  mapLibraryOptions.center  - default map center in Latitude/Longitude  mapLibraryOptions.zoom  - default map zoom (use higher value to zoom in)  mapLibraryOptions.minZoom  - map's minimum zoom level  mapLibraryOptions.imagePath  - default path for images used by Leaflet; there is no need to change this, in most cases  zoomToResultsExtent  - flag to indicate if the map will auto-zoom after a 'manual' search (via quick or advanced search, not auto-refresh)  measureOptions  - some settings used by the measuring tool class  tileMapOptions  - tile map options to be made available on the UI; shapeMap setting is an instance of ogrid.ShapeMap class that exposes a shape map data (geoJson) representing a boundary",
            "title": "map"
        },
        {
            "location": "/system-administration/opengrid-configuration/#quicksearch",
            "text": "mock  - for testing use only (deprecated)  plugins  - list of plug-ins for handling quick searches  helpFile  - quick search help content  plugInOptions  - options used by quick search plug-ins; right now, only the Places plug-in, the default plug-in that gets called when no other plug-in matches the quick search text, is reading these settings  places.esriGeocodeBBox  - the bounding box used for the ArcGIS World Geocoder service to perform the address/POI search within the given extent; bounding rectangle coordinates can be entered as a simple comma-separated string in the format  ,  places.esriGeocodeLocation  - Longitude/Latitude value that represents the center of the search area; if more than 1 search results are returned by the service, the results nearest to this point will appear first on the list of results  places.esriGeocodeMaxResults  - maximum results to be returned by the ArcGIS Geocode service  places.esriGeocodeFilterUsingShape  - when specific address/locations are returned by the ArcGIS Geocoder service, the search results are filtered to make sure only results inside this  shape  or boundary are returned",
            "title": "quickSearch"
        },
        {
            "location": "/system-administration/opengrid-configuration/#advancedsearch",
            "text": "geoFilterBoundaries  - boundaries used on Advanced Search; the data attribute should be set to a geoJson value that represents the boundary",
            "title": "advancedSearch"
        },
        {
            "location": "/system-administration/opengrid-configuration/#commandbar",
            "text": "commands  - list of buttons and required security level  mobileBreakPointWidth  - width value of the browser window used for internally determining if application is in  mobile mode  or in normal mode (note that this should be in sync with the value used by Bootstrap/bootstrap.css for its media queries)",
            "title": "commandBar"
        },
        {
            "location": "/system-administration/opengrid-configuration/#service",
            "text": "endpoint  - the endpoint of the service layer that OpenGrid application calls; this is the default setting used which is overriden by the one found in  config/EnvSettings.js  timeout  - the timeout value of every service call, in milliseconds; if a service call times out, an alert message is displayed  maxresults  - the maximum number of rows to return for a query  authUrl  - the URL of the operation to use for retrieving a security token during the login process; there is usually no need to change this unless the service layer is configured or developed to use a different URL  authRenewUrl  - the URL of the operation to use for renewing a security token  errorHandler  - internal setting to indicate the class to use for handling some exceptions  dateFormat  - data format used for converting string to date value for comparing dates on auto-refresh highlighting; this is dependent on the format used by the underlying service  autoLogin  - flag to indicate if login page will be displayed or if application will automatically login using credentials specified in  autologinUserId  and  autologinPassword  autologinUserId  - user id to use for internal login when autoLogin is set to 'true'  autologinPassword  - password to use for internal login when autoLogin is set to 'true'",
            "title": "service"
        },
        {
            "location": "/system-administration/opengrid-configuration/#help",
            "text": "url  - url to use for the application help link  type  - the type of help link: 'icon' or 'button'",
            "title": "help"
        }
    ]
}